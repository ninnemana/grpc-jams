syntax = "proto3";
package vinyl;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
// import "google/protobuf/empty.proto";
import "protoc-gen-swagger/options/annotations.proto";

option (gogoproto.protosizer_all) = true;
option (gogoproto.sizer_all) = false;
option go_package = "github.com/ninnemana/vinyl/pkg/vinyl";

message Alias {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
	int32 id = 1 [(gogoproto.casttype) = "int", (gogoproto.customname) = "ID"];
	string name = 2;
	string resource_url = 3 [(gogoproto.customname) = "ResourceURL"];
}

// ArtistSource ...
message ArtistSource {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
	string anv = 1;
	int32 id = 2 [(gogoproto.casttype) = "int", (gogoproto.customname) = "ID"];
	string join = 3;
	string name = 4;
	string resource_url = 5 [(gogoproto.customname) = "ResourceURL"];
	string role = 6;
	string tracks = 7;
}

// Community ...
message Community {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
	repeated Contributor contributors = 1 [(gogoproto.nullable) = false];
	string data_quality = 2;
	int32 have = 3 [(gogoproto.casttype) = "int"];
	Rating rating = 4 [(gogoproto.nullable) = false];
	string status = 5;
	Submitter submitter = 6 [(gogoproto.nullable) = false];
	int32 want = 7 [(gogoproto.casttype) = "int"];
}

// Company ...
message Company {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
	string catno = 1;
	string entity_type = 2;
	string entity_type_name = 3;
	int32 id = 4 [(gogoproto.casttype) = "int", (gogoproto.customname) = "ID"];
	string name = 5;
	string resource_url = 6 [(gogoproto.customname) = "ResourceURL"];
}

// Contributor ...
message Contributor {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
	string resource_url = 1 [(gogoproto.customname) = "ResourceURL"];
	string username = 2;
}

// DatabaseService ...
message DatabaseService {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
}

// Format ...
message Format {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
	repeated string descriptions = 1;
	string name = 2;
	string qty = 3;
}

// Identifier ...
message Identifier {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
	string type = 1;
	string value = 2;
}

// Image ...
message Image {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
	int32 height = 1 [(gogoproto.casttype) = "int"];
	int32 width = 2 [(gogoproto.casttype) = "int"];
	string resource_url = 3 [(gogoproto.customname) = "ResourceURL"];
	string type = 4;
	string uri = 5 [(gogoproto.customname) = "URI"];
	string uri150 = 6 [(gogoproto.customname) = "URI150"];
}

// LabelSource ...
message LabelSource {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
	string catno = 1;
	string entity_type = 2;
	string entity_type_name = 3;
	int32 id = 4 [(gogoproto.casttype) = "int", (gogoproto.customname) = "ID"];
	string name = 5;
	string resource_url = 6 [(gogoproto.customname) = "ResourceURL"];
}

// Member ...
message Member {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
	bool active = 1;
	int32 id = 2 [(gogoproto.casttype) = "int", (gogoproto.customname) = "ID"];
	string name = 3;
	string resource_url = 4 [(gogoproto.customname) = "ResourceURL"];
}

// Page ...
message Page {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
	int32 per_page = 1 [(gogoproto.casttype) = "int"];
	int32 items = 2 [(gogoproto.casttype) = "int"];
	int32 page = 3 [(gogoproto.casttype) = "int"];
	URLsList urls = 4 [(gogoproto.customname) = "URLs", (gogoproto.nullable) = false];
	int32 pages = 5 [(gogoproto.casttype) = "int"];
}

// Rating ...
message Rating {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
	float average = 1;
	int32 count = 2 [(gogoproto.casttype) = "int"];
}

// ReleaseSource ...
message ReleaseSource {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
	string artist = 1;
	string catno = 2;
	string format = 3;
	int32 id = 4 [(gogoproto.casttype) = "int", (gogoproto.customname) = "ID"];
	string resource_url = 5 [(gogoproto.customname) = "ResourceURL"];
	string status = 6;
	string thumb = 7;
	string title = 8;
	int32 year = 9 [(gogoproto.casttype) = "int"];
	int32 main_release = 10 [(gogoproto.casttype) = "int"];
	string role = 11;
	string type = 12;
}

message Pagination {
	int32 page = 1;
	int32 items = 2;
	int32 per_page = 3;
}

message ReleaseResponse {
	ReleaseSource release = 1;
	Pagination pagination = 2;
}

message SearchResponse {
	repeated ReleaseResponse results = 1;
}

// Result describes a part of search result
message Result {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
	repeated string style = 1;
	string thumb = 2;
	string cover_image = 3;
	string title = 4;
	string country = 5;
	repeated string format = 6;
	string uri = 7 [(gogoproto.customname) = "URI"];
	Community community = 8 [(gogoproto.nullable) = false];
	repeated string label = 9;
	string catno = 10;
	string year = 11;
	repeated string genre = 12;
	string resource_url = 13 [(gogoproto.customname) = "ResourceURL"];
	string type = 14;
	int32 id = 15 [(gogoproto.casttype) = "int", (gogoproto.customname) = "ID"];
	int32 master_id = 16 [(gogoproto.casttype) = "int", (gogoproto.customname) = "MasterID"];
}

// SearchService ...
message SearchService {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
}

// Sublable ...
message Sublable {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
	string resource_url = 1 [(gogoproto.customname) = "ResourceURL"];
	int32 id = 2 [(gogoproto.casttype) = "int", (gogoproto.customname) = "ID"];
	string name = 3;
}

// Submitter ...
message Submitter {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
	string resource_url = 1 [(gogoproto.customname) = "ResourceURL"];
	string username = 2;
}

// Track ...
message Track {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
	string duration = 1;
	string position = 2;
	string title = 3;
	string type = 4;
	repeated ArtistSource extraartists = 5 [(gogoproto.nullable) = false];
	repeated ArtistSource artists = 6 [(gogoproto.nullable) = false];
}

// URLsList ...
message URLsList {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
	string last = 1;
	string next = 2;
}

// Version ...
message Version {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
	string catno = 1;
	string country = 2;
	string format = 3;
	int32 id = 4 [(gogoproto.casttype) = "int", (gogoproto.customname) = "ID"];
	string label = 5;
	string released = 6;
	string resource_url = 7 [(gogoproto.customname) = "ResourceURL"];
	string status = 8;
	string thumb = 9;
	string title = 10;
}

// Video ...
message Video {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
	string description = 1;
	int32 duration = 2 [(gogoproto.casttype) = "int"];
	bool embed = 3;
	string title = 4;
	string uri = 5 [(gogoproto.customname) = "URI"];
}

message Master {
	int32 id = 1;
	string title = 2;
	repeated ArtistSource artists = 3;
	repeated string styles = 4;
	repeated string genres = 5;
	int32 year = 6;
	repeated Track track_list = 7;
	string notes = 8;
	repeated Image images = 9;
	repeated Video videos = 10;
	int32 number_for_sale = 11;
	float lowest_price = 12;
	string uri = 13;
	int32 main_release = 14;
	string main_release_url = 15;
	int32 most_recent_release = 16;
	string most_recent_release_url = 17;
	string versions_url = 18;
	string resource_url = 19;
	string data_quality = 20;
}

message Release {
	int32 id = 1;
	string title = 2;
	repeated ArtistSource artists = 3;
	string artists_sort = 4;
	string data_quality = 5;
	string thumb = 6;
	Community community = 7;
	repeated Company companies = 8;
	string country = 9;
	string date_added = 10;
	string date_changed = 11;
	int32 estimated_weight = 12;
	repeated ArtistSource extra_artists = 13;
	repeated Format format = 14;
	repeated string genres = 15;
	repeated Identifier identifiers = 16;
	repeated Image images = 17;
	repeated LabelSource labels = 18;
	float lowest_price = 19;
	int32 master_id = 20;
	string master_url = 21;
	string notes = 22;
	int32 number_for_sale = 23;
	string released = 24;
	string released_formatted = 25;
	string resource_url = 26;
	repeated string series = 27;
	string status = 28;
	repeated string styles = 29;
	repeated Track track_list = 30;
	string uri = 31;
	repeated Video videos = 32;
	int32 year = 33;
}

message ListResponse {
	repeated Release results = 1;
}

message ListParams {
	string artist = 1;
	string type = 2;
	string title = 3;
}

message GetParams {
	string id = 1;
	string type = 2;
}

message SearchParams {
    string query = 1;
    string type = 2;
    string title = 3;
    string releaseTitle = 4;
    string credit = 5;
    string artist = 6;
    string anv = 7;
    string label = 8;
    string genre = 9;
    string country = 10;
    string year = 11;
    string format = 12;
    string catno = 13;
    string barcode = 14;
    string track = 15;
    string submitter = 16;
    string contributor = 17;
}

message StoreParams {
    string id = 1;
}

message HealthRequest {
	string uptime = 1;
	string machine = 2;
}

message HealthResponse {
	string uptime = 1;
	string machine = 2;
}

message BadRequest {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
            title: "BadRequest"
			type: OBJECT
		}
	};
	
	int32 code = 1;
	string message = 2;
}

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
	info: {
		title: "Vinyl API";
        version: "0.0.1";
        description: "This API will give access to vinyl data";
		contact: {
			url: "https://ninneman.org";
			email: "alex@ninneman.com";
		};
    };
    host: "api.alexninneman.com";
    schemes: HTTP;
    schemes: HTTPS;
    consumes: "application/json";
    produces: "application/json";
    security_definitions: {
		security: {
			key: "BasicAuth";
			value: {
				type: TYPE_BASIC;
			}
		}
    };
    responses: {
		key: "400";
		value: {
            description: "Bad Request.";
            schema: {
                json_schema: {
                    ref: ".vinyl.BadRequest";
                }
            }
		}
	}
	responses: {
		key: "401";
		value: {
			description: "Unauthorized";
			schema: {
                json_schema: {
                    ref: ".vinyl.BadRequest";
                }
            }
		}
	}
	responses: {
		key: "403";
		value: {
			description: "Forbidden";
			schema: {
                json_schema: {
                    ref: ".vinyl.BadRequest";
                }
            }
		}
    }
    responses: {
		key: "500";
		value: {
			description: "Internal Server Error";
			schema: {
                json_schema: {
                    ref: ".vinyl.BadRequest";
                }
            }
		}
    }
    responses: {
		key: "502";
		value: {
			description: "Bad Gateway";
			schema: {
                json_schema: {
                    ref: ".vinyl.BadRequest";
                }
            }
		}
    }
    responses: {
		key: "503";
		value: {
			description: "Service Unavailable";
			schema: {
                json_schema: {
                    ref: ".vinyl.BadRequest";
                }
            }
		}
	}
};

service Vinyl {
	rpc Health(HealthRequest) returns (HealthResponse) {
		option (google.api.http) = {
			get: "/vinyls/health";
		};
		option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "Returns the current state of the service";
			summary: "Health Check";
		};
	}
    rpc List(ListParams) returns (ListResponse) {
		option (google.api.http) = {
            get: "/vinyls";
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "A list of vinyl objects.";
			summary: "Get Registered Vinyls";
		};
	}
    rpc Get(GetParams) returns (Master) {
		option (google.api.http) = {
            get: "/vinyls/{id}";
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "Retrieve a specific vinyl object.";
			summary: "Get a Registed Vinyl";
		};
	}
    rpc Search(SearchParams) returns (SearchResponse) {
		option (google.api.http) = {
			post: "/vinyls/search";
			body: "*";
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "Search for a vinyl release";
			summary: "Search for vinyls that are distributed";
		};
	}
    rpc Store(Release) returns (Release) {
		option (google.api.http) = {
            put: "/vinyls/{id}";
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "Store a vinyl in a users personal registry";
			summary: "Register a vinyl";
		};
	}
}