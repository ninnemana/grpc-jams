// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: vinyl.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Vinyl {

  /// <summary>Holder for reflection information generated from vinyl.proto</summary>
  public static partial class VinylReflection {

    #region Descriptor
    /// <summary>File descriptor for vinyl.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static VinylReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgt2aW55bC5wcm90bxIFdmlueWwaLWdpdGh1Yi5jb20vZ29nby9wcm90b2J1",
            "Zi9nb2dvcHJvdG8vZ29nby5wcm90bxocZ29vZ2xlL2FwaS9hbm5vdGF0aW9u",
            "cy5wcm90bxoscHJvdG9jLWdlbi1zd2FnZ2VyL29wdGlvbnMvYW5ub3RhdGlv",
            "bnMucHJvdG8isgIKBkFydGlzdBIWCg5uYW1ldmFyaWF0aW9ucxgBIAMoCRIP",
            "Cgdwcm9maWxlGAIgASgJEiUKDHJlbGVhc2VzX3VybBgDIAEoCUIP4t4fC1Jl",
            "bGVhc2VzVVJMEiUKDHJlc291cmNlX3VybBgEIAEoCUIP4t4fC1Jlc291cmNl",
            "VVJMEhQKA3VyaRgFIAEoCUIH4t4fA1VSSRIWCgR1cmxzGAYgAygJQgji3h8E",
            "VVJMcxIUCgxkYXRhX3F1YWxpdHkYByABKAkSGQoCaWQYCCABKANCDfreHwNp",
            "bnTi3h8CSUQSIgoGaW1hZ2VzGAkgAygLMgwudmlueWwuSW1hZ2VCBMjeHwAS",
            "JAoHbWVtYmVycxgKIAMoCzINLnZpbnlsLk1lbWJlckIEyN4fADoIiKAfAPCh",
            "HwAioQEKDEFydGlzdFNvdXJjZRILCgNhbnYYASABKAkSGQoCaWQYAiABKANC",
            "DfreHwNpbnTi3h8CSUQSDAoEam9pbhgDIAEoCRIMCgRuYW1lGAQgASgJEiUK",
            "DHJlc291cmNlX3VybBgFIAEoCUIP4t4fC1Jlc291cmNlVVJMEgwKBHJvbGUY",
            "BiABKAkSDgoGdHJhY2tzGAcgASgJOgiIoB8A8KEfACLpAQoJQ29tbXVuaXR5",
            "Ei4KDGNvbnRyaWJ1dG9ycxgBIAMoCzISLnZpbnlsLkNvbnRyaWJ1dG9yQgTI",
            "3h8AEhQKDGRhdGFfcXVhbGl0eRgCIAEoCRIVCgRoYXZlGAMgASgDQgf63h8D",
            "aW50EiMKBnJhdGluZxgEIAEoCzINLnZpbnlsLlJhdGluZ0IEyN4fABIOCgZz",
            "dGF0dXMYBSABKAkSKQoJc3VibWl0dGVyGAYgASgLMhAudmlueWwuU3VibWl0",
            "dGVyQgTI3h8AEhUKBHdhbnQYByABKANCB/reHwNpbnQ6CIigHwDwoR8AIqEB",
            "CgdDb21wYW55Eg0KBWNhdG5vGAEgASgJEhMKC2VudGl0eV90eXBlGAIgASgJ",
            "EhgKEGVudGl0eV90eXBlX25hbWUYAyABKAkSGQoCaWQYBCABKANCDfreHwNp",
            "bnTi3h8CSUQSDAoEbmFtZRgFIAEoCRIlCgxyZXNvdXJjZV91cmwYBiABKAlC",
            "D+LeHwtSZXNvdXJjZVVSTDoIiKAfAPChHwAiUAoLQ29udHJpYnV0b3ISJQoM",
            "cmVzb3VyY2VfdXJsGAEgASgJQg/i3h8LUmVzb3VyY2VVUkwSEAoIdXNlcm5h",
            "bWUYAiABKAk6CIigHwDwoR8AIhsKD0RhdGFiYXNlU2VydmljZToIiKAfAPCh",
            "HwAiQwoGRm9ybWF0EhQKDGRlc2NyaXB0aW9ucxgBIAMoCRIMCgRuYW1lGAIg",
            "ASgJEgsKA3F0eRgDIAEoCToIiKAfAPChHwAiMwoKSWRlbnRpZmllchIMCgR0",
            "eXBlGAEgASgJEg0KBXZhbHVlGAIgASgJOgiIoB8A8KEfACKpAQoFSW1hZ2US",
            "FwoGaGVpZ2h0GAEgASgDQgf63h8DaW50EhYKBXdpZHRoGAIgASgDQgf63h8D",
            "aW50EiUKDHJlc291cmNlX3VybBgDIAEoCUIP4t4fC1Jlc291cmNlVVJMEgwK",
            "BHR5cGUYBCABKAkSFAoDdXJpGAUgASgJQgfi3h8DVVJJEhoKBnVyaTE1MBgG",
            "IAEoCUIK4t4fBlVSSTE1MDoIiKAfAPChHwAiiwEKC0xhYmVsU291cmNlEg0K",
            "BWNhdG5vGAEgASgJEhMKC2VudGl0eV90eXBlGAIgASgJEhkKAmlkGAMgASgD",
            "Qg363h8DaW504t4fAklEEgwKBG5hbWUYBCABKAkSJQoMcmVzb3VyY2VfdXJs",
            "GAUgASgJQg/i3h8LUmVzb3VyY2VVUkw6CIigHwDwoR8AInIKBk1lbWJlchIO",
            "CgZhY3RpdmUYASABKAgSGQoCaWQYAiABKANCDfreHwNpbnTi3h8CSUQSDAoE",
            "bmFtZRgDIAEoCRIlCgxyZXNvdXJjZV91cmwYBCABKAlCD+LeHwtSZXNvdXJj",
            "ZVVSTDoIiKAfAPChHwAinwEKBFBhZ2USGQoIcGVyX3BhZ2UYASABKANCB/re",
            "HwNpbnQSFgoFaXRlbXMYAiABKANCB/reHwNpbnQSFQoEcGFnZRgDIAEoA0IH",
            "+t4fA2ludBIrCgR1cmxzGAQgASgLMg8udmlueWwuVVJMc0xpc3RCDOLeHwRV",
            "UkxzyN4fABIWCgVwYWdlcxgFIAEoA0IH+t4fA2ludDoIiKAfAPChHwAiOwoG",
            "UmF0aW5nEg8KB2F2ZXJhZ2UYASABKAISFgoFY291bnQYAiABKANCB/reHwNp",
            "bnQ6CIigHwDwoR8AIqICCg1SZWxlYXNlU291cmNlEg4KBmFydGlzdBgBIAEo",
            "CRINCgVjYXRubxgCIAEoCRIOCgZmb3JtYXQYAyABKAkSGQoCaWQYBCABKANC",
            "DfreHwNpbnTi3h8CSUQSJQoMcmVzb3VyY2VfdXJsGAUgASgJQg/i3h8LUmVz",
            "b3VyY2VVUkwSDgoGc3RhdHVzGAYgASgJEg0KBXRodW1iGAcgASgJEg0KBXRp",
            "dGxlGAggASgJEhUKBHllYXIYCSABKANCB/reHwNpbnQSHQoMbWFpbl9yZWxl",
            "YXNlGAogASgDQgf63h8DaW50EgwKBHJvbGUYCyABKAkSDAoEdHlwZRgMIAEo",
            "CTogkkEVChMqDVJlbGVhc2VTb3VyY2WaAgEGiKAfAPChHwAirAIKBlJlc3Vs",
            "dBINCgVzdHlsZRgBIAMoCRINCgV0aHVtYhgCIAEoCRINCgV0aXRsZRgDIAEo",
            "CRIPCgdjb3VudHJ5GAQgASgJEg4KBmZvcm1hdBgFIAMoCRIUCgN1cmkYBiAB",
            "KAlCB+LeHwNVUkkSKQoJY29tbXVuaXR5GAcgASgLMhAudmlueWwuQ29tbXVu",
            "aXR5QgTI3h8AEg0KBWxhYmVsGAggAygJEg0KBWNhdG5vGAkgASgJEgwKBHll",
            "YXIYCiABKAkSDQoFZ2VucmUYCyADKAkSJQoMcmVzb3VyY2VfdXJsGAwgASgJ",
            "Qg/i3h8LUmVzb3VyY2VVUkwSDAoEdHlwZRgNIAEoCRIZCgJpZBgOIAEoA0IN",
            "+t4fA2ludOLeHwJJRDoIiKAfAPChHwAiGQoNU2VhcmNoU2VydmljZToIiKAf",
            "APChHwAiZAoIU3VibGFibGUSJQoMcmVzb3VyY2VfdXJsGAEgASgJQg/i3h8L",
            "UmVzb3VyY2VVUkwSGQoCaWQYAiABKANCDfreHwNpbnTi3h8CSUQSDAoEbmFt",
            "ZRgDIAEoCToIiKAfAPChHwAiTgoJU3VibWl0dGVyEiUKDHJlc291cmNlX3Vy",
            "bBgBIAEoCUIP4t4fC1Jlc291cmNlVVJMEhAKCHVzZXJuYW1lGAIgASgJOgiI",
            "oB8A8KEfACKvAQoFVHJhY2sSEAoIZHVyYXRpb24YASABKAkSEAoIcG9zaXRp",
            "b24YAiABKAkSDQoFdGl0bGUYAyABKAkSDAoEdHlwZRgEIAEoCRIvCgxleHRy",
            "YWFydGlzdHMYBSADKAsyEy52aW55bC5BcnRpc3RTb3VyY2VCBMjeHwASKgoH",
            "YXJ0aXN0cxgGIAMoCzITLnZpbnlsLkFydGlzdFNvdXJjZUIEyN4fADoIiKAf",
            "APChHwAiMAoIVVJMc0xpc3QSDAoEbGFzdBgBIAEoCRIMCgRuZXh0GAIgASgJ",
            "OgiIoB8A8KEfACLUAQoHVmVyc2lvbhINCgVjYXRubxgBIAEoCRIPCgdjb3Vu",
            "dHJ5GAIgASgJEg4KBmZvcm1hdBgDIAEoCRIZCgJpZBgEIAEoA0IN+t4fA2lu",
            "dOLeHwJJRBINCgVsYWJlbBgFIAEoCRIQCghyZWxlYXNlZBgGIAEoCRIlCgxy",
            "ZXNvdXJjZV91cmwYByABKAlCD+LeHwtSZXNvdXJjZVVSTBIOCgZzdGF0dXMY",
            "CCABKAkSDQoFdGh1bWIYCSABKAkSDQoFdGl0bGUYCiABKAk6CIigHwDwoR8A",
            "InUKBVZpZGVvEhMKC2Rlc2NyaXB0aW9uGAEgASgJEhkKCGR1cmF0aW9uGAIg",
            "ASgDQgf63h8DaW50Eg0KBWVtYmVkGAMgASgIEg0KBXRpdGxlGAQgASgJEhQK",
            "A3VyaRgFIAEoCUIH4t4fA1VSSToIiKAfAPChHwAiOQoKTGlzdFBhcmFtcxIO",
            "CgZhcnRpc3QYASABKAkSDAoEdHlwZRgCIAEoCRINCgV0aXRsZRgDIAEoCSIX",
            "CglHZXRQYXJhbXMSCgoCaWQYASABKAkioQIKDFNlYXJjaFBhcmFtcxINCgVx",
            "dWVyeRgBIAEoCRIMCgR0eXBlGAIgASgJEg0KBXRpdGxlGAMgASgJEhQKDHJl",
            "bGVhc2VUaXRsZRgEIAEoCRIOCgZjcmVkaXQYBSABKAkSDgoGYXJ0aXN0GAYg",
            "ASgJEgsKA2FudhgHIAEoCRINCgVsYWJlbBgIIAEoCRINCgVnZW5yZRgJIAEo",
            "CRIPCgdjb3VudHJ5GAogASgJEgwKBHllYXIYCyABKAkSDgoGZm9ybWF0GAwg",
            "ASgJEg0KBWNhdG5vGA0gASgJEg8KB2JhcmNvZGUYDiABKAkSDQoFdHJhY2sY",
            "DyABKAkSEQoJc3VibWl0dGVyGBAgASgJEhMKC2NvbnRyaWJ1dG9yGBEgASgJ",
            "IhkKC1N0b3JlUGFyYW1zEgoKAmlkGAEgASgJIjAKDUhlYWx0aFJlcXVlc3QS",
            "DgoGdXB0aW1lGAEgASgJEg8KB21hY2hpbmUYAiABKAkiMQoOSGVhbHRoUmVz",
            "cG9uc2USDgoGdXB0aW1lGAEgASgJEg8KB21hY2hpbmUYAiABKAkiQgoKQmFk",
            "UmVxdWVzdBIMCgRjb2RlGAEgASgDEg8KB21lc3NhZ2UYAiABKAk6FZJBEgoQ",
            "KgpCYWRSZXF1ZXN0mgIBBjKlBQoFVmlueWwShAEKBkhlYWx0aBIULnZpbnls",
            "LkhlYWx0aFJlcXVlc3QaFS52aW55bC5IZWFsdGhSZXNwb25zZSJNgtPkkwIM",
            "EgovdjAvaGVhbHRokkE4EgxIZWFsdGggQ2hlY2saKFJldHVybnMgdGhlIGN1",
            "cnJlbnQgc3RhdGUgb2YgdGhlIHNlcnZpY2USdgoETGlzdBIRLnZpbnlsLkxp",
            "c3RQYXJhbXMaFC52aW55bC5SZWxlYXNlU291cmNlIkOC0+STAgkSBy92aW55",
            "bHOSQTESFUdldCBSZWdpc3RlcmVkIFZpbnlscxoYQSBsaXN0IG9mIHZpbnls",
            "IG9iamVjdHMuMAESfwoDR2V0EhAudmlueWwuR2V0UGFyYW1zGhQudmlueWwu",
            "UmVsZWFzZVNvdXJjZSJQgtPkkwIOEgwvdmlueWxzL3tpZH2SQTkSFEdldCBh",
            "IFJlZ2lzdGVkIFZpbnlsGiFSZXRyaWV2ZSBhIHNwZWNpZmljIHZpbnlsIG9i",
            "amVjdC4SkAEKBlNlYXJjaBITLnZpbnlsLlNlYXJjaFBhcmFtcxoULnZpbnls",
            "LlJlbGVhc2VTb3VyY2UiWYLT5JMCDCIHL3NlYXJjaDoBKpJBRBImU2VhcmNo",
            "IGZvciB2aW55bHMgdGhhdCBhcmUgZGlzdHJpYnV0ZWQaGlNlYXJjaCBmb3Ig",
            "YSB2aW55bCByZWxlYXNlMAESiAEKBVN0b3JlEhIudmlueWwuU3RvcmVQYXJh",
            "bXMaFC52aW55bC5SZWxlYXNlU291cmNlIlWC0+STAg4aDC92aW55bHMve2lk",
            "fZJBPhIQUmVnaXN0ZXIgYSB2aW55bBoqU3RvcmUgYSB2aW55bCBpbiBhIHVz",
            "ZXJzIHBlcnNvbmFsIHJlZ2lzdHJ5QuwDWgV2aW55bKDjHgHg4h4AkkHZAxJm",
            "CglWaW55bCBBUEkSJ1RoaXMgQVBJIHdpbGwgZ2l2ZSBhY2Nlc3MgdG8gdmlu",
            "eWwgZGF0YSIpEhRodHRwczovL25pbm5lbWFuLm9yZxoRYWxleEBuaW5uZW1h",
            "bi5jb20yBTAuMC4xGhRhcGkuYWxleG5pbm5lbWFuLmNvbSoCAQIyEGFwcGxp",
            "Y2F0aW9uL2pzb246EGFwcGxpY2F0aW9uL2pzb25SLAoDNDAwEiUKDEJhZCBS",
            "ZXF1ZXN0LhIVChMaES52aW55bC5CYWRSZXF1ZXN0UiwKAzQwMRIlCgxVbmF1",
            "dGhvcml6ZWQSFQoTGhEudmlueWwuQmFkUmVxdWVzdFIpCgM0MDMSIgoJRm9y",
            "YmlkZGVuEhUKExoRLnZpbnlsLkJhZFJlcXVlc3RSNQoDNTAwEi4KFUludGVy",
            "bmFsIFNlcnZlciBFcnJvchIVChMaES52aW55bC5CYWRSZXF1ZXN0UisKAzUw",
            "MhIkCgtCYWQgR2F0ZXdheRIVChMaES52aW55bC5CYWRSZXF1ZXN0UjMKAzUw",
            "MxIsChNTZXJ2aWNlIFVuYXZhaWxhYmxlEhUKExoRLnZpbnlsLkJhZFJlcXVl",
            "c3RaEQoPCglCYXNpY0F1dGgSAggBYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Gogoproto.GogoReflection.Descriptor, global::Google.Api.AnnotationsReflection.Descriptor, global::Grpc.Gateway.ProtocGenSwagger.Options.AnnotationsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Vinyl.Artist), global::Vinyl.Artist.Parser, new[]{ "Namevariations", "Profile", "ReleasesUrl", "ResourceUrl", "Uri", "Urls", "DataQuality", "Id", "Images", "Members" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Vinyl.ArtistSource), global::Vinyl.ArtistSource.Parser, new[]{ "Anv", "Id", "Join", "Name", "ResourceUrl", "Role", "Tracks" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Vinyl.Community), global::Vinyl.Community.Parser, new[]{ "Contributors", "DataQuality", "Have", "Rating", "Status", "Submitter", "Want" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Vinyl.Company), global::Vinyl.Company.Parser, new[]{ "Catno", "EntityType", "EntityTypeName", "Id", "Name", "ResourceUrl" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Vinyl.Contributor), global::Vinyl.Contributor.Parser, new[]{ "ResourceUrl", "Username" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Vinyl.DatabaseService), global::Vinyl.DatabaseService.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Vinyl.Format), global::Vinyl.Format.Parser, new[]{ "Descriptions", "Name", "Qty" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Vinyl.Identifier), global::Vinyl.Identifier.Parser, new[]{ "Type", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Vinyl.Image), global::Vinyl.Image.Parser, new[]{ "Height", "Width", "ResourceUrl", "Type", "Uri", "Uri150" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Vinyl.LabelSource), global::Vinyl.LabelSource.Parser, new[]{ "Catno", "EntityType", "Id", "Name", "ResourceUrl" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Vinyl.Member), global::Vinyl.Member.Parser, new[]{ "Active", "Id", "Name", "ResourceUrl" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Vinyl.Page), global::Vinyl.Page.Parser, new[]{ "PerPage", "Items", "Page_", "Urls", "Pages" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Vinyl.Rating), global::Vinyl.Rating.Parser, new[]{ "Average", "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Vinyl.ReleaseSource), global::Vinyl.ReleaseSource.Parser, new[]{ "Artist", "Catno", "Format", "Id", "ResourceUrl", "Status", "Thumb", "Title", "Year", "MainRelease", "Role", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Vinyl.Result), global::Vinyl.Result.Parser, new[]{ "Style", "Thumb", "Title", "Country", "Format", "Uri", "Community", "Label", "Catno", "Year", "Genre", "ResourceUrl", "Type", "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Vinyl.SearchService), global::Vinyl.SearchService.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Vinyl.Sublable), global::Vinyl.Sublable.Parser, new[]{ "ResourceUrl", "Id", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Vinyl.Submitter), global::Vinyl.Submitter.Parser, new[]{ "ResourceUrl", "Username" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Vinyl.Track), global::Vinyl.Track.Parser, new[]{ "Duration", "Position", "Title", "Type", "Extraartists", "Artists" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Vinyl.URLsList), global::Vinyl.URLsList.Parser, new[]{ "Last", "Next" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Vinyl.Version), global::Vinyl.Version.Parser, new[]{ "Catno", "Country", "Format", "Id", "Label", "Released", "ResourceUrl", "Status", "Thumb", "Title" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Vinyl.Video), global::Vinyl.Video.Parser, new[]{ "Description", "Duration", "Embed", "Title", "Uri" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Vinyl.ListParams), global::Vinyl.ListParams.Parser, new[]{ "Artist", "Type", "Title" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Vinyl.GetParams), global::Vinyl.GetParams.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Vinyl.SearchParams), global::Vinyl.SearchParams.Parser, new[]{ "Query", "Type", "Title", "ReleaseTitle", "Credit", "Artist", "Anv", "Label", "Genre", "Country", "Year", "Format", "Catno", "Barcode", "Track", "Submitter", "Contributor" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Vinyl.StoreParams), global::Vinyl.StoreParams.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Vinyl.HealthRequest), global::Vinyl.HealthRequest.Parser, new[]{ "Uptime", "Machine" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Vinyl.HealthResponse), global::Vinyl.HealthResponse.Parser, new[]{ "Uptime", "Machine" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Vinyl.BadRequest), global::Vinyl.BadRequest.Parser, new[]{ "Code", "Message" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Artist ...
  /// </summary>
  public sealed partial class Artist : pb::IMessage<Artist> {
    private static readonly pb::MessageParser<Artist> _parser = new pb::MessageParser<Artist>(() => new Artist());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Artist> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Vinyl.VinylReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Artist() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Artist(Artist other) : this() {
      namevariations_ = other.namevariations_.Clone();
      profile_ = other.profile_;
      releasesUrl_ = other.releasesUrl_;
      resourceUrl_ = other.resourceUrl_;
      uri_ = other.uri_;
      urls_ = other.urls_.Clone();
      dataQuality_ = other.dataQuality_;
      id_ = other.id_;
      images_ = other.images_.Clone();
      members_ = other.members_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Artist Clone() {
      return new Artist(this);
    }

    /// <summary>Field number for the "namevariations" field.</summary>
    public const int NamevariationsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_namevariations_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> namevariations_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Namevariations {
      get { return namevariations_; }
    }

    /// <summary>Field number for the "profile" field.</summary>
    public const int ProfileFieldNumber = 2;
    private string profile_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Profile {
      get { return profile_; }
      set {
        profile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "releases_url" field.</summary>
    public const int ReleasesUrlFieldNumber = 3;
    private string releasesUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReleasesUrl {
      get { return releasesUrl_; }
      set {
        releasesUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "resource_url" field.</summary>
    public const int ResourceUrlFieldNumber = 4;
    private string resourceUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResourceUrl {
      get { return resourceUrl_; }
      set {
        resourceUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "uri" field.</summary>
    public const int UriFieldNumber = 5;
    private string uri_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uri {
      get { return uri_; }
      set {
        uri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "urls" field.</summary>
    public const int UrlsFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_urls_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> urls_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Urls {
      get { return urls_; }
    }

    /// <summary>Field number for the "data_quality" field.</summary>
    public const int DataQualityFieldNumber = 7;
    private string dataQuality_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DataQuality {
      get { return dataQuality_; }
      set {
        dataQuality_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 8;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "images" field.</summary>
    public const int ImagesFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Vinyl.Image> _repeated_images_codec
        = pb::FieldCodec.ForMessage(74, global::Vinyl.Image.Parser);
    private readonly pbc::RepeatedField<global::Vinyl.Image> images_ = new pbc::RepeatedField<global::Vinyl.Image>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Vinyl.Image> Images {
      get { return images_; }
    }

    /// <summary>Field number for the "members" field.</summary>
    public const int MembersFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Vinyl.Member> _repeated_members_codec
        = pb::FieldCodec.ForMessage(82, global::Vinyl.Member.Parser);
    private readonly pbc::RepeatedField<global::Vinyl.Member> members_ = new pbc::RepeatedField<global::Vinyl.Member>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Vinyl.Member> Members {
      get { return members_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Artist);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Artist other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!namevariations_.Equals(other.namevariations_)) return false;
      if (Profile != other.Profile) return false;
      if (ReleasesUrl != other.ReleasesUrl) return false;
      if (ResourceUrl != other.ResourceUrl) return false;
      if (Uri != other.Uri) return false;
      if(!urls_.Equals(other.urls_)) return false;
      if (DataQuality != other.DataQuality) return false;
      if (Id != other.Id) return false;
      if(!images_.Equals(other.images_)) return false;
      if(!members_.Equals(other.members_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= namevariations_.GetHashCode();
      if (Profile.Length != 0) hash ^= Profile.GetHashCode();
      if (ReleasesUrl.Length != 0) hash ^= ReleasesUrl.GetHashCode();
      if (ResourceUrl.Length != 0) hash ^= ResourceUrl.GetHashCode();
      if (Uri.Length != 0) hash ^= Uri.GetHashCode();
      hash ^= urls_.GetHashCode();
      if (DataQuality.Length != 0) hash ^= DataQuality.GetHashCode();
      if (Id != 0L) hash ^= Id.GetHashCode();
      hash ^= images_.GetHashCode();
      hash ^= members_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      namevariations_.WriteTo(output, _repeated_namevariations_codec);
      if (Profile.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Profile);
      }
      if (ReleasesUrl.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ReleasesUrl);
      }
      if (ResourceUrl.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ResourceUrl);
      }
      if (Uri.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Uri);
      }
      urls_.WriteTo(output, _repeated_urls_codec);
      if (DataQuality.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(DataQuality);
      }
      if (Id != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(Id);
      }
      images_.WriteTo(output, _repeated_images_codec);
      members_.WriteTo(output, _repeated_members_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += namevariations_.CalculateSize(_repeated_namevariations_codec);
      if (Profile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Profile);
      }
      if (ReleasesUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReleasesUrl);
      }
      if (ResourceUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourceUrl);
      }
      if (Uri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uri);
      }
      size += urls_.CalculateSize(_repeated_urls_codec);
      if (DataQuality.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DataQuality);
      }
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      size += images_.CalculateSize(_repeated_images_codec);
      size += members_.CalculateSize(_repeated_members_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Artist other) {
      if (other == null) {
        return;
      }
      namevariations_.Add(other.namevariations_);
      if (other.Profile.Length != 0) {
        Profile = other.Profile;
      }
      if (other.ReleasesUrl.Length != 0) {
        ReleasesUrl = other.ReleasesUrl;
      }
      if (other.ResourceUrl.Length != 0) {
        ResourceUrl = other.ResourceUrl;
      }
      if (other.Uri.Length != 0) {
        Uri = other.Uri;
      }
      urls_.Add(other.urls_);
      if (other.DataQuality.Length != 0) {
        DataQuality = other.DataQuality;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      images_.Add(other.images_);
      members_.Add(other.members_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            namevariations_.AddEntriesFrom(input, _repeated_namevariations_codec);
            break;
          }
          case 18: {
            Profile = input.ReadString();
            break;
          }
          case 26: {
            ReleasesUrl = input.ReadString();
            break;
          }
          case 34: {
            ResourceUrl = input.ReadString();
            break;
          }
          case 42: {
            Uri = input.ReadString();
            break;
          }
          case 50: {
            urls_.AddEntriesFrom(input, _repeated_urls_codec);
            break;
          }
          case 58: {
            DataQuality = input.ReadString();
            break;
          }
          case 64: {
            Id = input.ReadInt64();
            break;
          }
          case 74: {
            images_.AddEntriesFrom(input, _repeated_images_codec);
            break;
          }
          case 82: {
            members_.AddEntriesFrom(input, _repeated_members_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// ArtistSource ...
  /// </summary>
  public sealed partial class ArtistSource : pb::IMessage<ArtistSource> {
    private static readonly pb::MessageParser<ArtistSource> _parser = new pb::MessageParser<ArtistSource>(() => new ArtistSource());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ArtistSource> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Vinyl.VinylReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArtistSource() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArtistSource(ArtistSource other) : this() {
      anv_ = other.anv_;
      id_ = other.id_;
      join_ = other.join_;
      name_ = other.name_;
      resourceUrl_ = other.resourceUrl_;
      role_ = other.role_;
      tracks_ = other.tracks_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArtistSource Clone() {
      return new ArtistSource(this);
    }

    /// <summary>Field number for the "anv" field.</summary>
    public const int AnvFieldNumber = 1;
    private string anv_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Anv {
      get { return anv_; }
      set {
        anv_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "join" field.</summary>
    public const int JoinFieldNumber = 3;
    private string join_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Join {
      get { return join_; }
      set {
        join_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "resource_url" field.</summary>
    public const int ResourceUrlFieldNumber = 5;
    private string resourceUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResourceUrl {
      get { return resourceUrl_; }
      set {
        resourceUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "role" field.</summary>
    public const int RoleFieldNumber = 6;
    private string role_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Role {
      get { return role_; }
      set {
        role_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tracks" field.</summary>
    public const int TracksFieldNumber = 7;
    private string tracks_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Tracks {
      get { return tracks_; }
      set {
        tracks_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ArtistSource);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ArtistSource other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Anv != other.Anv) return false;
      if (Id != other.Id) return false;
      if (Join != other.Join) return false;
      if (Name != other.Name) return false;
      if (ResourceUrl != other.ResourceUrl) return false;
      if (Role != other.Role) return false;
      if (Tracks != other.Tracks) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Anv.Length != 0) hash ^= Anv.GetHashCode();
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Join.Length != 0) hash ^= Join.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ResourceUrl.Length != 0) hash ^= ResourceUrl.GetHashCode();
      if (Role.Length != 0) hash ^= Role.GetHashCode();
      if (Tracks.Length != 0) hash ^= Tracks.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Anv.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Anv);
      }
      if (Id != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Id);
      }
      if (Join.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Join);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (ResourceUrl.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ResourceUrl);
      }
      if (Role.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Role);
      }
      if (Tracks.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Tracks);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Anv.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Anv);
      }
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Join.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Join);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ResourceUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourceUrl);
      }
      if (Role.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Role);
      }
      if (Tracks.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Tracks);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ArtistSource other) {
      if (other == null) {
        return;
      }
      if (other.Anv.Length != 0) {
        Anv = other.Anv;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Join.Length != 0) {
        Join = other.Join;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ResourceUrl.Length != 0) {
        ResourceUrl = other.ResourceUrl;
      }
      if (other.Role.Length != 0) {
        Role = other.Role;
      }
      if (other.Tracks.Length != 0) {
        Tracks = other.Tracks;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Anv = input.ReadString();
            break;
          }
          case 16: {
            Id = input.ReadInt64();
            break;
          }
          case 26: {
            Join = input.ReadString();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 42: {
            ResourceUrl = input.ReadString();
            break;
          }
          case 50: {
            Role = input.ReadString();
            break;
          }
          case 58: {
            Tracks = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Community ...
  /// </summary>
  public sealed partial class Community : pb::IMessage<Community> {
    private static readonly pb::MessageParser<Community> _parser = new pb::MessageParser<Community>(() => new Community());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Community> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Vinyl.VinylReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Community() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Community(Community other) : this() {
      contributors_ = other.contributors_.Clone();
      dataQuality_ = other.dataQuality_;
      have_ = other.have_;
      rating_ = other.rating_ != null ? other.rating_.Clone() : null;
      status_ = other.status_;
      submitter_ = other.submitter_ != null ? other.submitter_.Clone() : null;
      want_ = other.want_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Community Clone() {
      return new Community(this);
    }

    /// <summary>Field number for the "contributors" field.</summary>
    public const int ContributorsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Vinyl.Contributor> _repeated_contributors_codec
        = pb::FieldCodec.ForMessage(10, global::Vinyl.Contributor.Parser);
    private readonly pbc::RepeatedField<global::Vinyl.Contributor> contributors_ = new pbc::RepeatedField<global::Vinyl.Contributor>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Vinyl.Contributor> Contributors {
      get { return contributors_; }
    }

    /// <summary>Field number for the "data_quality" field.</summary>
    public const int DataQualityFieldNumber = 2;
    private string dataQuality_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DataQuality {
      get { return dataQuality_; }
      set {
        dataQuality_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "have" field.</summary>
    public const int HaveFieldNumber = 3;
    private long have_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Have {
      get { return have_; }
      set {
        have_ = value;
      }
    }

    /// <summary>Field number for the "rating" field.</summary>
    public const int RatingFieldNumber = 4;
    private global::Vinyl.Rating rating_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Vinyl.Rating Rating {
      get { return rating_; }
      set {
        rating_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 5;
    private string status_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Status {
      get { return status_; }
      set {
        status_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "submitter" field.</summary>
    public const int SubmitterFieldNumber = 6;
    private global::Vinyl.Submitter submitter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Vinyl.Submitter Submitter {
      get { return submitter_; }
      set {
        submitter_ = value;
      }
    }

    /// <summary>Field number for the "want" field.</summary>
    public const int WantFieldNumber = 7;
    private long want_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Want {
      get { return want_; }
      set {
        want_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Community);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Community other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!contributors_.Equals(other.contributors_)) return false;
      if (DataQuality != other.DataQuality) return false;
      if (Have != other.Have) return false;
      if (!object.Equals(Rating, other.Rating)) return false;
      if (Status != other.Status) return false;
      if (!object.Equals(Submitter, other.Submitter)) return false;
      if (Want != other.Want) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= contributors_.GetHashCode();
      if (DataQuality.Length != 0) hash ^= DataQuality.GetHashCode();
      if (Have != 0L) hash ^= Have.GetHashCode();
      if (rating_ != null) hash ^= Rating.GetHashCode();
      if (Status.Length != 0) hash ^= Status.GetHashCode();
      if (submitter_ != null) hash ^= Submitter.GetHashCode();
      if (Want != 0L) hash ^= Want.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      contributors_.WriteTo(output, _repeated_contributors_codec);
      if (DataQuality.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DataQuality);
      }
      if (Have != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Have);
      }
      if (rating_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Rating);
      }
      if (Status.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Status);
      }
      if (submitter_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Submitter);
      }
      if (Want != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(Want);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += contributors_.CalculateSize(_repeated_contributors_codec);
      if (DataQuality.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DataQuality);
      }
      if (Have != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Have);
      }
      if (rating_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rating);
      }
      if (Status.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Status);
      }
      if (submitter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Submitter);
      }
      if (Want != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Want);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Community other) {
      if (other == null) {
        return;
      }
      contributors_.Add(other.contributors_);
      if (other.DataQuality.Length != 0) {
        DataQuality = other.DataQuality;
      }
      if (other.Have != 0L) {
        Have = other.Have;
      }
      if (other.rating_ != null) {
        if (rating_ == null) {
          rating_ = new global::Vinyl.Rating();
        }
        Rating.MergeFrom(other.Rating);
      }
      if (other.Status.Length != 0) {
        Status = other.Status;
      }
      if (other.submitter_ != null) {
        if (submitter_ == null) {
          submitter_ = new global::Vinyl.Submitter();
        }
        Submitter.MergeFrom(other.Submitter);
      }
      if (other.Want != 0L) {
        Want = other.Want;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            contributors_.AddEntriesFrom(input, _repeated_contributors_codec);
            break;
          }
          case 18: {
            DataQuality = input.ReadString();
            break;
          }
          case 24: {
            Have = input.ReadInt64();
            break;
          }
          case 34: {
            if (rating_ == null) {
              rating_ = new global::Vinyl.Rating();
            }
            input.ReadMessage(rating_);
            break;
          }
          case 42: {
            Status = input.ReadString();
            break;
          }
          case 50: {
            if (submitter_ == null) {
              submitter_ = new global::Vinyl.Submitter();
            }
            input.ReadMessage(submitter_);
            break;
          }
          case 56: {
            Want = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Company ...
  /// </summary>
  public sealed partial class Company : pb::IMessage<Company> {
    private static readonly pb::MessageParser<Company> _parser = new pb::MessageParser<Company>(() => new Company());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Company> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Vinyl.VinylReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Company() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Company(Company other) : this() {
      catno_ = other.catno_;
      entityType_ = other.entityType_;
      entityTypeName_ = other.entityTypeName_;
      id_ = other.id_;
      name_ = other.name_;
      resourceUrl_ = other.resourceUrl_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Company Clone() {
      return new Company(this);
    }

    /// <summary>Field number for the "catno" field.</summary>
    public const int CatnoFieldNumber = 1;
    private string catno_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Catno {
      get { return catno_; }
      set {
        catno_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "entity_type" field.</summary>
    public const int EntityTypeFieldNumber = 2;
    private string entityType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EntityType {
      get { return entityType_; }
      set {
        entityType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "entity_type_name" field.</summary>
    public const int EntityTypeNameFieldNumber = 3;
    private string entityTypeName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EntityTypeName {
      get { return entityTypeName_; }
      set {
        entityTypeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 4;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 5;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "resource_url" field.</summary>
    public const int ResourceUrlFieldNumber = 6;
    private string resourceUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResourceUrl {
      get { return resourceUrl_; }
      set {
        resourceUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Company);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Company other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Catno != other.Catno) return false;
      if (EntityType != other.EntityType) return false;
      if (EntityTypeName != other.EntityTypeName) return false;
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (ResourceUrl != other.ResourceUrl) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Catno.Length != 0) hash ^= Catno.GetHashCode();
      if (EntityType.Length != 0) hash ^= EntityType.GetHashCode();
      if (EntityTypeName.Length != 0) hash ^= EntityTypeName.GetHashCode();
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ResourceUrl.Length != 0) hash ^= ResourceUrl.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Catno.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Catno);
      }
      if (EntityType.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(EntityType);
      }
      if (EntityTypeName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(EntityTypeName);
      }
      if (Id != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Name);
      }
      if (ResourceUrl.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ResourceUrl);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Catno.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Catno);
      }
      if (EntityType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EntityType);
      }
      if (EntityTypeName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EntityTypeName);
      }
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ResourceUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourceUrl);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Company other) {
      if (other == null) {
        return;
      }
      if (other.Catno.Length != 0) {
        Catno = other.Catno;
      }
      if (other.EntityType.Length != 0) {
        EntityType = other.EntityType;
      }
      if (other.EntityTypeName.Length != 0) {
        EntityTypeName = other.EntityTypeName;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ResourceUrl.Length != 0) {
        ResourceUrl = other.ResourceUrl;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Catno = input.ReadString();
            break;
          }
          case 18: {
            EntityType = input.ReadString();
            break;
          }
          case 26: {
            EntityTypeName = input.ReadString();
            break;
          }
          case 32: {
            Id = input.ReadInt64();
            break;
          }
          case 42: {
            Name = input.ReadString();
            break;
          }
          case 50: {
            ResourceUrl = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Contributor ...
  /// </summary>
  public sealed partial class Contributor : pb::IMessage<Contributor> {
    private static readonly pb::MessageParser<Contributor> _parser = new pb::MessageParser<Contributor>(() => new Contributor());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Contributor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Vinyl.VinylReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Contributor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Contributor(Contributor other) : this() {
      resourceUrl_ = other.resourceUrl_;
      username_ = other.username_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Contributor Clone() {
      return new Contributor(this);
    }

    /// <summary>Field number for the "resource_url" field.</summary>
    public const int ResourceUrlFieldNumber = 1;
    private string resourceUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResourceUrl {
      get { return resourceUrl_; }
      set {
        resourceUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 2;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Contributor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Contributor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResourceUrl != other.ResourceUrl) return false;
      if (Username != other.Username) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ResourceUrl.Length != 0) hash ^= ResourceUrl.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ResourceUrl.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ResourceUrl);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Username);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResourceUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourceUrl);
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Contributor other) {
      if (other == null) {
        return;
      }
      if (other.ResourceUrl.Length != 0) {
        ResourceUrl = other.ResourceUrl;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ResourceUrl = input.ReadString();
            break;
          }
          case 18: {
            Username = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// DatabaseService ...
  /// </summary>
  public sealed partial class DatabaseService : pb::IMessage<DatabaseService> {
    private static readonly pb::MessageParser<DatabaseService> _parser = new pb::MessageParser<DatabaseService>(() => new DatabaseService());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DatabaseService> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Vinyl.VinylReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatabaseService() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatabaseService(DatabaseService other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatabaseService Clone() {
      return new DatabaseService(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DatabaseService);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DatabaseService other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DatabaseService other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// Format ...
  /// </summary>
  public sealed partial class Format : pb::IMessage<Format> {
    private static readonly pb::MessageParser<Format> _parser = new pb::MessageParser<Format>(() => new Format());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Format> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Vinyl.VinylReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Format() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Format(Format other) : this() {
      descriptions_ = other.descriptions_.Clone();
      name_ = other.name_;
      qty_ = other.qty_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Format Clone() {
      return new Format(this);
    }

    /// <summary>Field number for the "descriptions" field.</summary>
    public const int DescriptionsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_descriptions_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> descriptions_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Descriptions {
      get { return descriptions_; }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "qty" field.</summary>
    public const int QtyFieldNumber = 3;
    private string qty_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Qty {
      get { return qty_; }
      set {
        qty_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Format);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Format other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!descriptions_.Equals(other.descriptions_)) return false;
      if (Name != other.Name) return false;
      if (Qty != other.Qty) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= descriptions_.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Qty.Length != 0) hash ^= Qty.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      descriptions_.WriteTo(output, _repeated_descriptions_codec);
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Qty.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Qty);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += descriptions_.CalculateSize(_repeated_descriptions_codec);
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Qty.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Qty);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Format other) {
      if (other == null) {
        return;
      }
      descriptions_.Add(other.descriptions_);
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Qty.Length != 0) {
        Qty = other.Qty;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            descriptions_.AddEntriesFrom(input, _repeated_descriptions_codec);
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Qty = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Identifier ...
  /// </summary>
  public sealed partial class Identifier : pb::IMessage<Identifier> {
    private static readonly pb::MessageParser<Identifier> _parser = new pb::MessageParser<Identifier>(() => new Identifier());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Identifier> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Vinyl.VinylReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Identifier() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Identifier(Identifier other) : this() {
      type_ = other.type_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Identifier Clone() {
      return new Identifier(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Identifier);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Identifier other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Identifier other) {
      if (other == null) {
        return;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Image ...
  /// </summary>
  public sealed partial class Image : pb::IMessage<Image> {
    private static readonly pb::MessageParser<Image> _parser = new pb::MessageParser<Image>(() => new Image());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Image> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Vinyl.VinylReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Image() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Image(Image other) : this() {
      height_ = other.height_;
      width_ = other.width_;
      resourceUrl_ = other.resourceUrl_;
      type_ = other.type_;
      uri_ = other.uri_;
      uri150_ = other.uri150_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Image Clone() {
      return new Image(this);
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 1;
    private long height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 2;
    private long width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "resource_url" field.</summary>
    public const int ResourceUrlFieldNumber = 3;
    private string resourceUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResourceUrl {
      get { return resourceUrl_; }
      set {
        resourceUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "uri" field.</summary>
    public const int UriFieldNumber = 5;
    private string uri_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uri {
      get { return uri_; }
      set {
        uri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "uri150" field.</summary>
    public const int Uri150FieldNumber = 6;
    private string uri150_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uri150 {
      get { return uri150_; }
      set {
        uri150_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Image);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Image other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Height != other.Height) return false;
      if (Width != other.Width) return false;
      if (ResourceUrl != other.ResourceUrl) return false;
      if (Type != other.Type) return false;
      if (Uri != other.Uri) return false;
      if (Uri150 != other.Uri150) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Height != 0L) hash ^= Height.GetHashCode();
      if (Width != 0L) hash ^= Width.GetHashCode();
      if (ResourceUrl.Length != 0) hash ^= ResourceUrl.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Uri.Length != 0) hash ^= Uri.GetHashCode();
      if (Uri150.Length != 0) hash ^= Uri150.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Height != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Height);
      }
      if (Width != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Width);
      }
      if (ResourceUrl.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ResourceUrl);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Type);
      }
      if (Uri.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Uri);
      }
      if (Uri150.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Uri150);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Height != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Height);
      }
      if (Width != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Width);
      }
      if (ResourceUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourceUrl);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Uri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uri);
      }
      if (Uri150.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uri150);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Image other) {
      if (other == null) {
        return;
      }
      if (other.Height != 0L) {
        Height = other.Height;
      }
      if (other.Width != 0L) {
        Width = other.Width;
      }
      if (other.ResourceUrl.Length != 0) {
        ResourceUrl = other.ResourceUrl;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Uri.Length != 0) {
        Uri = other.Uri;
      }
      if (other.Uri150.Length != 0) {
        Uri150 = other.Uri150;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Height = input.ReadInt64();
            break;
          }
          case 16: {
            Width = input.ReadInt64();
            break;
          }
          case 26: {
            ResourceUrl = input.ReadString();
            break;
          }
          case 34: {
            Type = input.ReadString();
            break;
          }
          case 42: {
            Uri = input.ReadString();
            break;
          }
          case 50: {
            Uri150 = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// LabelSource ...
  /// </summary>
  public sealed partial class LabelSource : pb::IMessage<LabelSource> {
    private static readonly pb::MessageParser<LabelSource> _parser = new pb::MessageParser<LabelSource>(() => new LabelSource());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LabelSource> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Vinyl.VinylReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LabelSource() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LabelSource(LabelSource other) : this() {
      catno_ = other.catno_;
      entityType_ = other.entityType_;
      id_ = other.id_;
      name_ = other.name_;
      resourceUrl_ = other.resourceUrl_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LabelSource Clone() {
      return new LabelSource(this);
    }

    /// <summary>Field number for the "catno" field.</summary>
    public const int CatnoFieldNumber = 1;
    private string catno_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Catno {
      get { return catno_; }
      set {
        catno_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "entity_type" field.</summary>
    public const int EntityTypeFieldNumber = 2;
    private string entityType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EntityType {
      get { return entityType_; }
      set {
        entityType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 3;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "resource_url" field.</summary>
    public const int ResourceUrlFieldNumber = 5;
    private string resourceUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResourceUrl {
      get { return resourceUrl_; }
      set {
        resourceUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LabelSource);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LabelSource other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Catno != other.Catno) return false;
      if (EntityType != other.EntityType) return false;
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (ResourceUrl != other.ResourceUrl) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Catno.Length != 0) hash ^= Catno.GetHashCode();
      if (EntityType.Length != 0) hash ^= EntityType.GetHashCode();
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ResourceUrl.Length != 0) hash ^= ResourceUrl.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Catno.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Catno);
      }
      if (EntityType.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(EntityType);
      }
      if (Id != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (ResourceUrl.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ResourceUrl);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Catno.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Catno);
      }
      if (EntityType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EntityType);
      }
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ResourceUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourceUrl);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LabelSource other) {
      if (other == null) {
        return;
      }
      if (other.Catno.Length != 0) {
        Catno = other.Catno;
      }
      if (other.EntityType.Length != 0) {
        EntityType = other.EntityType;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ResourceUrl.Length != 0) {
        ResourceUrl = other.ResourceUrl;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Catno = input.ReadString();
            break;
          }
          case 18: {
            EntityType = input.ReadString();
            break;
          }
          case 24: {
            Id = input.ReadInt64();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 42: {
            ResourceUrl = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Member ...
  /// </summary>
  public sealed partial class Member : pb::IMessage<Member> {
    private static readonly pb::MessageParser<Member> _parser = new pb::MessageParser<Member>(() => new Member());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Member> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Vinyl.VinylReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Member() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Member(Member other) : this() {
      active_ = other.active_;
      id_ = other.id_;
      name_ = other.name_;
      resourceUrl_ = other.resourceUrl_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Member Clone() {
      return new Member(this);
    }

    /// <summary>Field number for the "active" field.</summary>
    public const int ActiveFieldNumber = 1;
    private bool active_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Active {
      get { return active_; }
      set {
        active_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "resource_url" field.</summary>
    public const int ResourceUrlFieldNumber = 4;
    private string resourceUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResourceUrl {
      get { return resourceUrl_; }
      set {
        resourceUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Member);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Member other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Active != other.Active) return false;
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (ResourceUrl != other.ResourceUrl) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Active != false) hash ^= Active.GetHashCode();
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ResourceUrl.Length != 0) hash ^= ResourceUrl.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Active != false) {
        output.WriteRawTag(8);
        output.WriteBool(Active);
      }
      if (Id != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (ResourceUrl.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ResourceUrl);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Active != false) {
        size += 1 + 1;
      }
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ResourceUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourceUrl);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Member other) {
      if (other == null) {
        return;
      }
      if (other.Active != false) {
        Active = other.Active;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ResourceUrl.Length != 0) {
        ResourceUrl = other.ResourceUrl;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Active = input.ReadBool();
            break;
          }
          case 16: {
            Id = input.ReadInt64();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            ResourceUrl = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Page ...
  /// </summary>
  public sealed partial class Page : pb::IMessage<Page> {
    private static readonly pb::MessageParser<Page> _parser = new pb::MessageParser<Page>(() => new Page());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Page> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Vinyl.VinylReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Page() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Page(Page other) : this() {
      perPage_ = other.perPage_;
      items_ = other.items_;
      page_ = other.page_;
      urls_ = other.urls_ != null ? other.urls_.Clone() : null;
      pages_ = other.pages_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Page Clone() {
      return new Page(this);
    }

    /// <summary>Field number for the "per_page" field.</summary>
    public const int PerPageFieldNumber = 1;
    private long perPage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PerPage {
      get { return perPage_; }
      set {
        perPage_ = value;
      }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 2;
    private long items_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Items {
      get { return items_; }
      set {
        items_ = value;
      }
    }

    /// <summary>Field number for the "page" field.</summary>
    public const int Page_FieldNumber = 3;
    private long page_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Page_ {
      get { return page_; }
      set {
        page_ = value;
      }
    }

    /// <summary>Field number for the "urls" field.</summary>
    public const int UrlsFieldNumber = 4;
    private global::Vinyl.URLsList urls_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Vinyl.URLsList Urls {
      get { return urls_; }
      set {
        urls_ = value;
      }
    }

    /// <summary>Field number for the "pages" field.</summary>
    public const int PagesFieldNumber = 5;
    private long pages_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Pages {
      get { return pages_; }
      set {
        pages_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Page);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Page other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PerPage != other.PerPage) return false;
      if (Items != other.Items) return false;
      if (Page_ != other.Page_) return false;
      if (!object.Equals(Urls, other.Urls)) return false;
      if (Pages != other.Pages) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PerPage != 0L) hash ^= PerPage.GetHashCode();
      if (Items != 0L) hash ^= Items.GetHashCode();
      if (Page_ != 0L) hash ^= Page_.GetHashCode();
      if (urls_ != null) hash ^= Urls.GetHashCode();
      if (Pages != 0L) hash ^= Pages.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PerPage != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PerPage);
      }
      if (Items != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Items);
      }
      if (Page_ != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Page_);
      }
      if (urls_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Urls);
      }
      if (Pages != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Pages);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PerPage != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PerPage);
      }
      if (Items != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Items);
      }
      if (Page_ != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Page_);
      }
      if (urls_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Urls);
      }
      if (Pages != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Pages);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Page other) {
      if (other == null) {
        return;
      }
      if (other.PerPage != 0L) {
        PerPage = other.PerPage;
      }
      if (other.Items != 0L) {
        Items = other.Items;
      }
      if (other.Page_ != 0L) {
        Page_ = other.Page_;
      }
      if (other.urls_ != null) {
        if (urls_ == null) {
          urls_ = new global::Vinyl.URLsList();
        }
        Urls.MergeFrom(other.Urls);
      }
      if (other.Pages != 0L) {
        Pages = other.Pages;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PerPage = input.ReadInt64();
            break;
          }
          case 16: {
            Items = input.ReadInt64();
            break;
          }
          case 24: {
            Page_ = input.ReadInt64();
            break;
          }
          case 34: {
            if (urls_ == null) {
              urls_ = new global::Vinyl.URLsList();
            }
            input.ReadMessage(urls_);
            break;
          }
          case 40: {
            Pages = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Rating ...
  /// </summary>
  public sealed partial class Rating : pb::IMessage<Rating> {
    private static readonly pb::MessageParser<Rating> _parser = new pb::MessageParser<Rating>(() => new Rating());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Rating> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Vinyl.VinylReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rating() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rating(Rating other) : this() {
      average_ = other.average_;
      count_ = other.count_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rating Clone() {
      return new Rating(this);
    }

    /// <summary>Field number for the "average" field.</summary>
    public const int AverageFieldNumber = 1;
    private float average_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Average {
      get { return average_; }
      set {
        average_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private long count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Rating);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Rating other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Average, other.Average)) return false;
      if (Count != other.Count) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Average != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Average);
      if (Count != 0L) hash ^= Count.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Average != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Average);
      }
      if (Count != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Average != 0F) {
        size += 1 + 4;
      }
      if (Count != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Count);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Rating other) {
      if (other == null) {
        return;
      }
      if (other.Average != 0F) {
        Average = other.Average;
      }
      if (other.Count != 0L) {
        Count = other.Count;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Average = input.ReadFloat();
            break;
          }
          case 16: {
            Count = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// ReleaseSource ...
  /// </summary>
  public sealed partial class ReleaseSource : pb::IMessage<ReleaseSource> {
    private static readonly pb::MessageParser<ReleaseSource> _parser = new pb::MessageParser<ReleaseSource>(() => new ReleaseSource());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReleaseSource> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Vinyl.VinylReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReleaseSource() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReleaseSource(ReleaseSource other) : this() {
      artist_ = other.artist_;
      catno_ = other.catno_;
      format_ = other.format_;
      id_ = other.id_;
      resourceUrl_ = other.resourceUrl_;
      status_ = other.status_;
      thumb_ = other.thumb_;
      title_ = other.title_;
      year_ = other.year_;
      mainRelease_ = other.mainRelease_;
      role_ = other.role_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReleaseSource Clone() {
      return new ReleaseSource(this);
    }

    /// <summary>Field number for the "artist" field.</summary>
    public const int ArtistFieldNumber = 1;
    private string artist_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Artist {
      get { return artist_; }
      set {
        artist_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "catno" field.</summary>
    public const int CatnoFieldNumber = 2;
    private string catno_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Catno {
      get { return catno_; }
      set {
        catno_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "format" field.</summary>
    public const int FormatFieldNumber = 3;
    private string format_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Format {
      get { return format_; }
      set {
        format_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 4;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "resource_url" field.</summary>
    public const int ResourceUrlFieldNumber = 5;
    private string resourceUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResourceUrl {
      get { return resourceUrl_; }
      set {
        resourceUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 6;
    private string status_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Status {
      get { return status_; }
      set {
        status_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "thumb" field.</summary>
    public const int ThumbFieldNumber = 7;
    private string thumb_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Thumb {
      get { return thumb_; }
      set {
        thumb_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 8;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "year" field.</summary>
    public const int YearFieldNumber = 9;
    private long year_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Year {
      get { return year_; }
      set {
        year_ = value;
      }
    }

    /// <summary>Field number for the "main_release" field.</summary>
    public const int MainReleaseFieldNumber = 10;
    private long mainRelease_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MainRelease {
      get { return mainRelease_; }
      set {
        mainRelease_ = value;
      }
    }

    /// <summary>Field number for the "role" field.</summary>
    public const int RoleFieldNumber = 11;
    private string role_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Role {
      get { return role_; }
      set {
        role_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 12;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReleaseSource);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReleaseSource other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Artist != other.Artist) return false;
      if (Catno != other.Catno) return false;
      if (Format != other.Format) return false;
      if (Id != other.Id) return false;
      if (ResourceUrl != other.ResourceUrl) return false;
      if (Status != other.Status) return false;
      if (Thumb != other.Thumb) return false;
      if (Title != other.Title) return false;
      if (Year != other.Year) return false;
      if (MainRelease != other.MainRelease) return false;
      if (Role != other.Role) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Artist.Length != 0) hash ^= Artist.GetHashCode();
      if (Catno.Length != 0) hash ^= Catno.GetHashCode();
      if (Format.Length != 0) hash ^= Format.GetHashCode();
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (ResourceUrl.Length != 0) hash ^= ResourceUrl.GetHashCode();
      if (Status.Length != 0) hash ^= Status.GetHashCode();
      if (Thumb.Length != 0) hash ^= Thumb.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (Year != 0L) hash ^= Year.GetHashCode();
      if (MainRelease != 0L) hash ^= MainRelease.GetHashCode();
      if (Role.Length != 0) hash ^= Role.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Artist.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Artist);
      }
      if (Catno.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Catno);
      }
      if (Format.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Format);
      }
      if (Id != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Id);
      }
      if (ResourceUrl.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ResourceUrl);
      }
      if (Status.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Status);
      }
      if (Thumb.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Thumb);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Title);
      }
      if (Year != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(Year);
      }
      if (MainRelease != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(MainRelease);
      }
      if (Role.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Role);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Artist.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Artist);
      }
      if (Catno.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Catno);
      }
      if (Format.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Format);
      }
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (ResourceUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourceUrl);
      }
      if (Status.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Status);
      }
      if (Thumb.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Thumb);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Year != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Year);
      }
      if (MainRelease != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MainRelease);
      }
      if (Role.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Role);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReleaseSource other) {
      if (other == null) {
        return;
      }
      if (other.Artist.Length != 0) {
        Artist = other.Artist;
      }
      if (other.Catno.Length != 0) {
        Catno = other.Catno;
      }
      if (other.Format.Length != 0) {
        Format = other.Format;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.ResourceUrl.Length != 0) {
        ResourceUrl = other.ResourceUrl;
      }
      if (other.Status.Length != 0) {
        Status = other.Status;
      }
      if (other.Thumb.Length != 0) {
        Thumb = other.Thumb;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.Year != 0L) {
        Year = other.Year;
      }
      if (other.MainRelease != 0L) {
        MainRelease = other.MainRelease;
      }
      if (other.Role.Length != 0) {
        Role = other.Role;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Artist = input.ReadString();
            break;
          }
          case 18: {
            Catno = input.ReadString();
            break;
          }
          case 26: {
            Format = input.ReadString();
            break;
          }
          case 32: {
            Id = input.ReadInt64();
            break;
          }
          case 42: {
            ResourceUrl = input.ReadString();
            break;
          }
          case 50: {
            Status = input.ReadString();
            break;
          }
          case 58: {
            Thumb = input.ReadString();
            break;
          }
          case 66: {
            Title = input.ReadString();
            break;
          }
          case 72: {
            Year = input.ReadInt64();
            break;
          }
          case 80: {
            MainRelease = input.ReadInt64();
            break;
          }
          case 90: {
            Role = input.ReadString();
            break;
          }
          case 98: {
            Type = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Result describes a part of search result
  /// </summary>
  public sealed partial class Result : pb::IMessage<Result> {
    private static readonly pb::MessageParser<Result> _parser = new pb::MessageParser<Result>(() => new Result());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Result> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Vinyl.VinylReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Result() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Result(Result other) : this() {
      style_ = other.style_.Clone();
      thumb_ = other.thumb_;
      title_ = other.title_;
      country_ = other.country_;
      format_ = other.format_.Clone();
      uri_ = other.uri_;
      community_ = other.community_ != null ? other.community_.Clone() : null;
      label_ = other.label_.Clone();
      catno_ = other.catno_;
      year_ = other.year_;
      genre_ = other.genre_.Clone();
      resourceUrl_ = other.resourceUrl_;
      type_ = other.type_;
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Result Clone() {
      return new Result(this);
    }

    /// <summary>Field number for the "style" field.</summary>
    public const int StyleFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_style_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> style_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Style {
      get { return style_; }
    }

    /// <summary>Field number for the "thumb" field.</summary>
    public const int ThumbFieldNumber = 2;
    private string thumb_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Thumb {
      get { return thumb_; }
      set {
        thumb_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 3;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "country" field.</summary>
    public const int CountryFieldNumber = 4;
    private string country_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Country {
      get { return country_; }
      set {
        country_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "format" field.</summary>
    public const int FormatFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_format_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> format_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Format {
      get { return format_; }
    }

    /// <summary>Field number for the "uri" field.</summary>
    public const int UriFieldNumber = 6;
    private string uri_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uri {
      get { return uri_; }
      set {
        uri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "community" field.</summary>
    public const int CommunityFieldNumber = 7;
    private global::Vinyl.Community community_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Vinyl.Community Community {
      get { return community_; }
      set {
        community_ = value;
      }
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _repeated_label_codec
        = pb::FieldCodec.ForString(66);
    private readonly pbc::RepeatedField<string> label_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Label {
      get { return label_; }
    }

    /// <summary>Field number for the "catno" field.</summary>
    public const int CatnoFieldNumber = 9;
    private string catno_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Catno {
      get { return catno_; }
      set {
        catno_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "year" field.</summary>
    public const int YearFieldNumber = 10;
    private string year_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Year {
      get { return year_; }
      set {
        year_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "genre" field.</summary>
    public const int GenreFieldNumber = 11;
    private static readonly pb::FieldCodec<string> _repeated_genre_codec
        = pb::FieldCodec.ForString(90);
    private readonly pbc::RepeatedField<string> genre_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Genre {
      get { return genre_; }
    }

    /// <summary>Field number for the "resource_url" field.</summary>
    public const int ResourceUrlFieldNumber = 12;
    private string resourceUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResourceUrl {
      get { return resourceUrl_; }
      set {
        resourceUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 13;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 14;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Result);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Result other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!style_.Equals(other.style_)) return false;
      if (Thumb != other.Thumb) return false;
      if (Title != other.Title) return false;
      if (Country != other.Country) return false;
      if(!format_.Equals(other.format_)) return false;
      if (Uri != other.Uri) return false;
      if (!object.Equals(Community, other.Community)) return false;
      if(!label_.Equals(other.label_)) return false;
      if (Catno != other.Catno) return false;
      if (Year != other.Year) return false;
      if(!genre_.Equals(other.genre_)) return false;
      if (ResourceUrl != other.ResourceUrl) return false;
      if (Type != other.Type) return false;
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= style_.GetHashCode();
      if (Thumb.Length != 0) hash ^= Thumb.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (Country.Length != 0) hash ^= Country.GetHashCode();
      hash ^= format_.GetHashCode();
      if (Uri.Length != 0) hash ^= Uri.GetHashCode();
      if (community_ != null) hash ^= Community.GetHashCode();
      hash ^= label_.GetHashCode();
      if (Catno.Length != 0) hash ^= Catno.GetHashCode();
      if (Year.Length != 0) hash ^= Year.GetHashCode();
      hash ^= genre_.GetHashCode();
      if (ResourceUrl.Length != 0) hash ^= ResourceUrl.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      style_.WriteTo(output, _repeated_style_codec);
      if (Thumb.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Thumb);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Title);
      }
      if (Country.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Country);
      }
      format_.WriteTo(output, _repeated_format_codec);
      if (Uri.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Uri);
      }
      if (community_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Community);
      }
      label_.WriteTo(output, _repeated_label_codec);
      if (Catno.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Catno);
      }
      if (Year.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Year);
      }
      genre_.WriteTo(output, _repeated_genre_codec);
      if (ResourceUrl.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(ResourceUrl);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Type);
      }
      if (Id != 0L) {
        output.WriteRawTag(112);
        output.WriteInt64(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += style_.CalculateSize(_repeated_style_codec);
      if (Thumb.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Thumb);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Country.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Country);
      }
      size += format_.CalculateSize(_repeated_format_codec);
      if (Uri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uri);
      }
      if (community_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Community);
      }
      size += label_.CalculateSize(_repeated_label_codec);
      if (Catno.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Catno);
      }
      if (Year.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Year);
      }
      size += genre_.CalculateSize(_repeated_genre_codec);
      if (ResourceUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourceUrl);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Result other) {
      if (other == null) {
        return;
      }
      style_.Add(other.style_);
      if (other.Thumb.Length != 0) {
        Thumb = other.Thumb;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.Country.Length != 0) {
        Country = other.Country;
      }
      format_.Add(other.format_);
      if (other.Uri.Length != 0) {
        Uri = other.Uri;
      }
      if (other.community_ != null) {
        if (community_ == null) {
          community_ = new global::Vinyl.Community();
        }
        Community.MergeFrom(other.Community);
      }
      label_.Add(other.label_);
      if (other.Catno.Length != 0) {
        Catno = other.Catno;
      }
      if (other.Year.Length != 0) {
        Year = other.Year;
      }
      genre_.Add(other.genre_);
      if (other.ResourceUrl.Length != 0) {
        ResourceUrl = other.ResourceUrl;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            style_.AddEntriesFrom(input, _repeated_style_codec);
            break;
          }
          case 18: {
            Thumb = input.ReadString();
            break;
          }
          case 26: {
            Title = input.ReadString();
            break;
          }
          case 34: {
            Country = input.ReadString();
            break;
          }
          case 42: {
            format_.AddEntriesFrom(input, _repeated_format_codec);
            break;
          }
          case 50: {
            Uri = input.ReadString();
            break;
          }
          case 58: {
            if (community_ == null) {
              community_ = new global::Vinyl.Community();
            }
            input.ReadMessage(community_);
            break;
          }
          case 66: {
            label_.AddEntriesFrom(input, _repeated_label_codec);
            break;
          }
          case 74: {
            Catno = input.ReadString();
            break;
          }
          case 82: {
            Year = input.ReadString();
            break;
          }
          case 90: {
            genre_.AddEntriesFrom(input, _repeated_genre_codec);
            break;
          }
          case 98: {
            ResourceUrl = input.ReadString();
            break;
          }
          case 106: {
            Type = input.ReadString();
            break;
          }
          case 112: {
            Id = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// SearchService ...
  /// </summary>
  public sealed partial class SearchService : pb::IMessage<SearchService> {
    private static readonly pb::MessageParser<SearchService> _parser = new pb::MessageParser<SearchService>(() => new SearchService());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SearchService> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Vinyl.VinylReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchService() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchService(SearchService other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchService Clone() {
      return new SearchService(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SearchService);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SearchService other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SearchService other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// Sublable ...
  /// </summary>
  public sealed partial class Sublable : pb::IMessage<Sublable> {
    private static readonly pb::MessageParser<Sublable> _parser = new pb::MessageParser<Sublable>(() => new Sublable());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Sublable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Vinyl.VinylReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sublable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sublable(Sublable other) : this() {
      resourceUrl_ = other.resourceUrl_;
      id_ = other.id_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sublable Clone() {
      return new Sublable(this);
    }

    /// <summary>Field number for the "resource_url" field.</summary>
    public const int ResourceUrlFieldNumber = 1;
    private string resourceUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResourceUrl {
      get { return resourceUrl_; }
      set {
        resourceUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Sublable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Sublable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResourceUrl != other.ResourceUrl) return false;
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ResourceUrl.Length != 0) hash ^= ResourceUrl.GetHashCode();
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ResourceUrl.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ResourceUrl);
      }
      if (Id != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResourceUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourceUrl);
      }
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Sublable other) {
      if (other == null) {
        return;
      }
      if (other.ResourceUrl.Length != 0) {
        ResourceUrl = other.ResourceUrl;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ResourceUrl = input.ReadString();
            break;
          }
          case 16: {
            Id = input.ReadInt64();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Submitter ...
  /// </summary>
  public sealed partial class Submitter : pb::IMessage<Submitter> {
    private static readonly pb::MessageParser<Submitter> _parser = new pb::MessageParser<Submitter>(() => new Submitter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Submitter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Vinyl.VinylReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Submitter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Submitter(Submitter other) : this() {
      resourceUrl_ = other.resourceUrl_;
      username_ = other.username_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Submitter Clone() {
      return new Submitter(this);
    }

    /// <summary>Field number for the "resource_url" field.</summary>
    public const int ResourceUrlFieldNumber = 1;
    private string resourceUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResourceUrl {
      get { return resourceUrl_; }
      set {
        resourceUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 2;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Submitter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Submitter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResourceUrl != other.ResourceUrl) return false;
      if (Username != other.Username) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ResourceUrl.Length != 0) hash ^= ResourceUrl.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ResourceUrl.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ResourceUrl);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Username);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResourceUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourceUrl);
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Submitter other) {
      if (other == null) {
        return;
      }
      if (other.ResourceUrl.Length != 0) {
        ResourceUrl = other.ResourceUrl;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ResourceUrl = input.ReadString();
            break;
          }
          case 18: {
            Username = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Track ...
  /// </summary>
  public sealed partial class Track : pb::IMessage<Track> {
    private static readonly pb::MessageParser<Track> _parser = new pb::MessageParser<Track>(() => new Track());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Track> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Vinyl.VinylReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Track() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Track(Track other) : this() {
      duration_ = other.duration_;
      position_ = other.position_;
      title_ = other.title_;
      type_ = other.type_;
      extraartists_ = other.extraartists_.Clone();
      artists_ = other.artists_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Track Clone() {
      return new Track(this);
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 1;
    private string duration_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Duration {
      get { return duration_; }
      set {
        duration_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private string position_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Position {
      get { return position_; }
      set {
        position_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 3;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "extraartists" field.</summary>
    public const int ExtraartistsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Vinyl.ArtistSource> _repeated_extraartists_codec
        = pb::FieldCodec.ForMessage(42, global::Vinyl.ArtistSource.Parser);
    private readonly pbc::RepeatedField<global::Vinyl.ArtistSource> extraartists_ = new pbc::RepeatedField<global::Vinyl.ArtistSource>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Vinyl.ArtistSource> Extraartists {
      get { return extraartists_; }
    }

    /// <summary>Field number for the "artists" field.</summary>
    public const int ArtistsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Vinyl.ArtistSource> _repeated_artists_codec
        = pb::FieldCodec.ForMessage(50, global::Vinyl.ArtistSource.Parser);
    private readonly pbc::RepeatedField<global::Vinyl.ArtistSource> artists_ = new pbc::RepeatedField<global::Vinyl.ArtistSource>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Vinyl.ArtistSource> Artists {
      get { return artists_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Track);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Track other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Duration != other.Duration) return false;
      if (Position != other.Position) return false;
      if (Title != other.Title) return false;
      if (Type != other.Type) return false;
      if(!extraartists_.Equals(other.extraartists_)) return false;
      if(!artists_.Equals(other.artists_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Duration.Length != 0) hash ^= Duration.GetHashCode();
      if (Position.Length != 0) hash ^= Position.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      hash ^= extraartists_.GetHashCode();
      hash ^= artists_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Duration.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Duration);
      }
      if (Position.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Position);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Title);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Type);
      }
      extraartists_.WriteTo(output, _repeated_extraartists_codec);
      artists_.WriteTo(output, _repeated_artists_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Duration.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Duration);
      }
      if (Position.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Position);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      size += extraartists_.CalculateSize(_repeated_extraartists_codec);
      size += artists_.CalculateSize(_repeated_artists_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Track other) {
      if (other == null) {
        return;
      }
      if (other.Duration.Length != 0) {
        Duration = other.Duration;
      }
      if (other.Position.Length != 0) {
        Position = other.Position;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      extraartists_.Add(other.extraartists_);
      artists_.Add(other.artists_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Duration = input.ReadString();
            break;
          }
          case 18: {
            Position = input.ReadString();
            break;
          }
          case 26: {
            Title = input.ReadString();
            break;
          }
          case 34: {
            Type = input.ReadString();
            break;
          }
          case 42: {
            extraartists_.AddEntriesFrom(input, _repeated_extraartists_codec);
            break;
          }
          case 50: {
            artists_.AddEntriesFrom(input, _repeated_artists_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// URLsList ...
  /// </summary>
  public sealed partial class URLsList : pb::IMessage<URLsList> {
    private static readonly pb::MessageParser<URLsList> _parser = new pb::MessageParser<URLsList>(() => new URLsList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<URLsList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Vinyl.VinylReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public URLsList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public URLsList(URLsList other) : this() {
      last_ = other.last_;
      next_ = other.next_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public URLsList Clone() {
      return new URLsList(this);
    }

    /// <summary>Field number for the "last" field.</summary>
    public const int LastFieldNumber = 1;
    private string last_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Last {
      get { return last_; }
      set {
        last_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "next" field.</summary>
    public const int NextFieldNumber = 2;
    private string next_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Next {
      get { return next_; }
      set {
        next_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as URLsList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(URLsList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Last != other.Last) return false;
      if (Next != other.Next) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Last.Length != 0) hash ^= Last.GetHashCode();
      if (Next.Length != 0) hash ^= Next.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Last.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Last);
      }
      if (Next.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Next);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Last.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Last);
      }
      if (Next.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Next);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(URLsList other) {
      if (other == null) {
        return;
      }
      if (other.Last.Length != 0) {
        Last = other.Last;
      }
      if (other.Next.Length != 0) {
        Next = other.Next;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Last = input.ReadString();
            break;
          }
          case 18: {
            Next = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Version ...
  /// </summary>
  public sealed partial class Version : pb::IMessage<Version> {
    private static readonly pb::MessageParser<Version> _parser = new pb::MessageParser<Version>(() => new Version());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Version> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Vinyl.VinylReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Version() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Version(Version other) : this() {
      catno_ = other.catno_;
      country_ = other.country_;
      format_ = other.format_;
      id_ = other.id_;
      label_ = other.label_;
      released_ = other.released_;
      resourceUrl_ = other.resourceUrl_;
      status_ = other.status_;
      thumb_ = other.thumb_;
      title_ = other.title_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Version Clone() {
      return new Version(this);
    }

    /// <summary>Field number for the "catno" field.</summary>
    public const int CatnoFieldNumber = 1;
    private string catno_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Catno {
      get { return catno_; }
      set {
        catno_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "country" field.</summary>
    public const int CountryFieldNumber = 2;
    private string country_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Country {
      get { return country_; }
      set {
        country_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "format" field.</summary>
    public const int FormatFieldNumber = 3;
    private string format_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Format {
      get { return format_; }
      set {
        format_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 4;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 5;
    private string label_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Label {
      get { return label_; }
      set {
        label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "released" field.</summary>
    public const int ReleasedFieldNumber = 6;
    private string released_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Released {
      get { return released_; }
      set {
        released_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "resource_url" field.</summary>
    public const int ResourceUrlFieldNumber = 7;
    private string resourceUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResourceUrl {
      get { return resourceUrl_; }
      set {
        resourceUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 8;
    private string status_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Status {
      get { return status_; }
      set {
        status_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "thumb" field.</summary>
    public const int ThumbFieldNumber = 9;
    private string thumb_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Thumb {
      get { return thumb_; }
      set {
        thumb_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 10;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Version);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Version other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Catno != other.Catno) return false;
      if (Country != other.Country) return false;
      if (Format != other.Format) return false;
      if (Id != other.Id) return false;
      if (Label != other.Label) return false;
      if (Released != other.Released) return false;
      if (ResourceUrl != other.ResourceUrl) return false;
      if (Status != other.Status) return false;
      if (Thumb != other.Thumb) return false;
      if (Title != other.Title) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Catno.Length != 0) hash ^= Catno.GetHashCode();
      if (Country.Length != 0) hash ^= Country.GetHashCode();
      if (Format.Length != 0) hash ^= Format.GetHashCode();
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Label.Length != 0) hash ^= Label.GetHashCode();
      if (Released.Length != 0) hash ^= Released.GetHashCode();
      if (ResourceUrl.Length != 0) hash ^= ResourceUrl.GetHashCode();
      if (Status.Length != 0) hash ^= Status.GetHashCode();
      if (Thumb.Length != 0) hash ^= Thumb.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Catno.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Catno);
      }
      if (Country.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Country);
      }
      if (Format.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Format);
      }
      if (Id != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Id);
      }
      if (Label.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Label);
      }
      if (Released.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Released);
      }
      if (ResourceUrl.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ResourceUrl);
      }
      if (Status.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Status);
      }
      if (Thumb.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Thumb);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Title);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Catno.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Catno);
      }
      if (Country.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Country);
      }
      if (Format.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Format);
      }
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Label.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
      }
      if (Released.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Released);
      }
      if (ResourceUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourceUrl);
      }
      if (Status.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Status);
      }
      if (Thumb.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Thumb);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Version other) {
      if (other == null) {
        return;
      }
      if (other.Catno.Length != 0) {
        Catno = other.Catno;
      }
      if (other.Country.Length != 0) {
        Country = other.Country;
      }
      if (other.Format.Length != 0) {
        Format = other.Format;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Label.Length != 0) {
        Label = other.Label;
      }
      if (other.Released.Length != 0) {
        Released = other.Released;
      }
      if (other.ResourceUrl.Length != 0) {
        ResourceUrl = other.ResourceUrl;
      }
      if (other.Status.Length != 0) {
        Status = other.Status;
      }
      if (other.Thumb.Length != 0) {
        Thumb = other.Thumb;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Catno = input.ReadString();
            break;
          }
          case 18: {
            Country = input.ReadString();
            break;
          }
          case 26: {
            Format = input.ReadString();
            break;
          }
          case 32: {
            Id = input.ReadInt64();
            break;
          }
          case 42: {
            Label = input.ReadString();
            break;
          }
          case 50: {
            Released = input.ReadString();
            break;
          }
          case 58: {
            ResourceUrl = input.ReadString();
            break;
          }
          case 66: {
            Status = input.ReadString();
            break;
          }
          case 74: {
            Thumb = input.ReadString();
            break;
          }
          case 82: {
            Title = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Video ...
  /// </summary>
  public sealed partial class Video : pb::IMessage<Video> {
    private static readonly pb::MessageParser<Video> _parser = new pb::MessageParser<Video>(() => new Video());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Video> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Vinyl.VinylReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Video() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Video(Video other) : this() {
      description_ = other.description_;
      duration_ = other.duration_;
      embed_ = other.embed_;
      title_ = other.title_;
      uri_ = other.uri_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Video Clone() {
      return new Video(this);
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 1;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 2;
    private long duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "embed" field.</summary>
    public const int EmbedFieldNumber = 3;
    private bool embed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Embed {
      get { return embed_; }
      set {
        embed_ = value;
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 4;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "uri" field.</summary>
    public const int UriFieldNumber = 5;
    private string uri_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uri {
      get { return uri_; }
      set {
        uri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Video);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Video other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Description != other.Description) return false;
      if (Duration != other.Duration) return false;
      if (Embed != other.Embed) return false;
      if (Title != other.Title) return false;
      if (Uri != other.Uri) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Duration != 0L) hash ^= Duration.GetHashCode();
      if (Embed != false) hash ^= Embed.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (Uri.Length != 0) hash ^= Uri.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Description.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Description);
      }
      if (Duration != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Duration);
      }
      if (Embed != false) {
        output.WriteRawTag(24);
        output.WriteBool(Embed);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Title);
      }
      if (Uri.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Uri);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Duration != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Duration);
      }
      if (Embed != false) {
        size += 1 + 1;
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Uri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uri);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Video other) {
      if (other == null) {
        return;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Duration != 0L) {
        Duration = other.Duration;
      }
      if (other.Embed != false) {
        Embed = other.Embed;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.Uri.Length != 0) {
        Uri = other.Uri;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Description = input.ReadString();
            break;
          }
          case 16: {
            Duration = input.ReadInt64();
            break;
          }
          case 24: {
            Embed = input.ReadBool();
            break;
          }
          case 34: {
            Title = input.ReadString();
            break;
          }
          case 42: {
            Uri = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListParams : pb::IMessage<ListParams> {
    private static readonly pb::MessageParser<ListParams> _parser = new pb::MessageParser<ListParams>(() => new ListParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Vinyl.VinylReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListParams(ListParams other) : this() {
      artist_ = other.artist_;
      type_ = other.type_;
      title_ = other.title_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListParams Clone() {
      return new ListParams(this);
    }

    /// <summary>Field number for the "artist" field.</summary>
    public const int ArtistFieldNumber = 1;
    private string artist_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Artist {
      get { return artist_; }
      set {
        artist_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 3;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Artist != other.Artist) return false;
      if (Type != other.Type) return false;
      if (Title != other.Title) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Artist.Length != 0) hash ^= Artist.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Artist.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Artist);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Title);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Artist.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Artist);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListParams other) {
      if (other == null) {
        return;
      }
      if (other.Artist.Length != 0) {
        Artist = other.Artist;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Artist = input.ReadString();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
          case 26: {
            Title = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetParams : pb::IMessage<GetParams> {
    private static readonly pb::MessageParser<GetParams> _parser = new pb::MessageParser<GetParams>(() => new GetParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Vinyl.VinylReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetParams(GetParams other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetParams Clone() {
      return new GetParams(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetParams other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SearchParams : pb::IMessage<SearchParams> {
    private static readonly pb::MessageParser<SearchParams> _parser = new pb::MessageParser<SearchParams>(() => new SearchParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SearchParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Vinyl.VinylReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchParams(SearchParams other) : this() {
      query_ = other.query_;
      type_ = other.type_;
      title_ = other.title_;
      releaseTitle_ = other.releaseTitle_;
      credit_ = other.credit_;
      artist_ = other.artist_;
      anv_ = other.anv_;
      label_ = other.label_;
      genre_ = other.genre_;
      country_ = other.country_;
      year_ = other.year_;
      format_ = other.format_;
      catno_ = other.catno_;
      barcode_ = other.barcode_;
      track_ = other.track_;
      submitter_ = other.submitter_;
      contributor_ = other.contributor_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchParams Clone() {
      return new SearchParams(this);
    }

    /// <summary>Field number for the "query" field.</summary>
    public const int QueryFieldNumber = 1;
    private string query_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Query {
      get { return query_; }
      set {
        query_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 3;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "releaseTitle" field.</summary>
    public const int ReleaseTitleFieldNumber = 4;
    private string releaseTitle_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReleaseTitle {
      get { return releaseTitle_; }
      set {
        releaseTitle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "credit" field.</summary>
    public const int CreditFieldNumber = 5;
    private string credit_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Credit {
      get { return credit_; }
      set {
        credit_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "artist" field.</summary>
    public const int ArtistFieldNumber = 6;
    private string artist_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Artist {
      get { return artist_; }
      set {
        artist_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "anv" field.</summary>
    public const int AnvFieldNumber = 7;
    private string anv_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Anv {
      get { return anv_; }
      set {
        anv_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 8;
    private string label_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Label {
      get { return label_; }
      set {
        label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "genre" field.</summary>
    public const int GenreFieldNumber = 9;
    private string genre_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Genre {
      get { return genre_; }
      set {
        genre_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "country" field.</summary>
    public const int CountryFieldNumber = 10;
    private string country_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Country {
      get { return country_; }
      set {
        country_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "year" field.</summary>
    public const int YearFieldNumber = 11;
    private string year_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Year {
      get { return year_; }
      set {
        year_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "format" field.</summary>
    public const int FormatFieldNumber = 12;
    private string format_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Format {
      get { return format_; }
      set {
        format_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "catno" field.</summary>
    public const int CatnoFieldNumber = 13;
    private string catno_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Catno {
      get { return catno_; }
      set {
        catno_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "barcode" field.</summary>
    public const int BarcodeFieldNumber = 14;
    private string barcode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Barcode {
      get { return barcode_; }
      set {
        barcode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "track" field.</summary>
    public const int TrackFieldNumber = 15;
    private string track_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Track {
      get { return track_; }
      set {
        track_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "submitter" field.</summary>
    public const int SubmitterFieldNumber = 16;
    private string submitter_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Submitter {
      get { return submitter_; }
      set {
        submitter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "contributor" field.</summary>
    public const int ContributorFieldNumber = 17;
    private string contributor_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Contributor {
      get { return contributor_; }
      set {
        contributor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SearchParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SearchParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Query != other.Query) return false;
      if (Type != other.Type) return false;
      if (Title != other.Title) return false;
      if (ReleaseTitle != other.ReleaseTitle) return false;
      if (Credit != other.Credit) return false;
      if (Artist != other.Artist) return false;
      if (Anv != other.Anv) return false;
      if (Label != other.Label) return false;
      if (Genre != other.Genre) return false;
      if (Country != other.Country) return false;
      if (Year != other.Year) return false;
      if (Format != other.Format) return false;
      if (Catno != other.Catno) return false;
      if (Barcode != other.Barcode) return false;
      if (Track != other.Track) return false;
      if (Submitter != other.Submitter) return false;
      if (Contributor != other.Contributor) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Query.Length != 0) hash ^= Query.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (ReleaseTitle.Length != 0) hash ^= ReleaseTitle.GetHashCode();
      if (Credit.Length != 0) hash ^= Credit.GetHashCode();
      if (Artist.Length != 0) hash ^= Artist.GetHashCode();
      if (Anv.Length != 0) hash ^= Anv.GetHashCode();
      if (Label.Length != 0) hash ^= Label.GetHashCode();
      if (Genre.Length != 0) hash ^= Genre.GetHashCode();
      if (Country.Length != 0) hash ^= Country.GetHashCode();
      if (Year.Length != 0) hash ^= Year.GetHashCode();
      if (Format.Length != 0) hash ^= Format.GetHashCode();
      if (Catno.Length != 0) hash ^= Catno.GetHashCode();
      if (Barcode.Length != 0) hash ^= Barcode.GetHashCode();
      if (Track.Length != 0) hash ^= Track.GetHashCode();
      if (Submitter.Length != 0) hash ^= Submitter.GetHashCode();
      if (Contributor.Length != 0) hash ^= Contributor.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Query.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Query);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Title);
      }
      if (ReleaseTitle.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ReleaseTitle);
      }
      if (Credit.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Credit);
      }
      if (Artist.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Artist);
      }
      if (Anv.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Anv);
      }
      if (Label.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Label);
      }
      if (Genre.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Genre);
      }
      if (Country.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Country);
      }
      if (Year.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Year);
      }
      if (Format.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Format);
      }
      if (Catno.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Catno);
      }
      if (Barcode.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Barcode);
      }
      if (Track.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Track);
      }
      if (Submitter.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Submitter);
      }
      if (Contributor.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(Contributor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Query.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Query);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (ReleaseTitle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReleaseTitle);
      }
      if (Credit.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Credit);
      }
      if (Artist.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Artist);
      }
      if (Anv.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Anv);
      }
      if (Label.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
      }
      if (Genre.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Genre);
      }
      if (Country.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Country);
      }
      if (Year.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Year);
      }
      if (Format.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Format);
      }
      if (Catno.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Catno);
      }
      if (Barcode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Barcode);
      }
      if (Track.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Track);
      }
      if (Submitter.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Submitter);
      }
      if (Contributor.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Contributor);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SearchParams other) {
      if (other == null) {
        return;
      }
      if (other.Query.Length != 0) {
        Query = other.Query;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.ReleaseTitle.Length != 0) {
        ReleaseTitle = other.ReleaseTitle;
      }
      if (other.Credit.Length != 0) {
        Credit = other.Credit;
      }
      if (other.Artist.Length != 0) {
        Artist = other.Artist;
      }
      if (other.Anv.Length != 0) {
        Anv = other.Anv;
      }
      if (other.Label.Length != 0) {
        Label = other.Label;
      }
      if (other.Genre.Length != 0) {
        Genre = other.Genre;
      }
      if (other.Country.Length != 0) {
        Country = other.Country;
      }
      if (other.Year.Length != 0) {
        Year = other.Year;
      }
      if (other.Format.Length != 0) {
        Format = other.Format;
      }
      if (other.Catno.Length != 0) {
        Catno = other.Catno;
      }
      if (other.Barcode.Length != 0) {
        Barcode = other.Barcode;
      }
      if (other.Track.Length != 0) {
        Track = other.Track;
      }
      if (other.Submitter.Length != 0) {
        Submitter = other.Submitter;
      }
      if (other.Contributor.Length != 0) {
        Contributor = other.Contributor;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Query = input.ReadString();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
          case 26: {
            Title = input.ReadString();
            break;
          }
          case 34: {
            ReleaseTitle = input.ReadString();
            break;
          }
          case 42: {
            Credit = input.ReadString();
            break;
          }
          case 50: {
            Artist = input.ReadString();
            break;
          }
          case 58: {
            Anv = input.ReadString();
            break;
          }
          case 66: {
            Label = input.ReadString();
            break;
          }
          case 74: {
            Genre = input.ReadString();
            break;
          }
          case 82: {
            Country = input.ReadString();
            break;
          }
          case 90: {
            Year = input.ReadString();
            break;
          }
          case 98: {
            Format = input.ReadString();
            break;
          }
          case 106: {
            Catno = input.ReadString();
            break;
          }
          case 114: {
            Barcode = input.ReadString();
            break;
          }
          case 122: {
            Track = input.ReadString();
            break;
          }
          case 130: {
            Submitter = input.ReadString();
            break;
          }
          case 138: {
            Contributor = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StoreParams : pb::IMessage<StoreParams> {
    private static readonly pb::MessageParser<StoreParams> _parser = new pb::MessageParser<StoreParams>(() => new StoreParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StoreParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Vinyl.VinylReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StoreParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StoreParams(StoreParams other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StoreParams Clone() {
      return new StoreParams(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StoreParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StoreParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StoreParams other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HealthRequest : pb::IMessage<HealthRequest> {
    private static readonly pb::MessageParser<HealthRequest> _parser = new pb::MessageParser<HealthRequest>(() => new HealthRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HealthRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Vinyl.VinylReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HealthRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HealthRequest(HealthRequest other) : this() {
      uptime_ = other.uptime_;
      machine_ = other.machine_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HealthRequest Clone() {
      return new HealthRequest(this);
    }

    /// <summary>Field number for the "uptime" field.</summary>
    public const int UptimeFieldNumber = 1;
    private string uptime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uptime {
      get { return uptime_; }
      set {
        uptime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "machine" field.</summary>
    public const int MachineFieldNumber = 2;
    private string machine_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Machine {
      get { return machine_; }
      set {
        machine_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HealthRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HealthRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uptime != other.Uptime) return false;
      if (Machine != other.Machine) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uptime.Length != 0) hash ^= Uptime.GetHashCode();
      if (Machine.Length != 0) hash ^= Machine.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uptime.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uptime);
      }
      if (Machine.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Machine);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uptime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uptime);
      }
      if (Machine.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Machine);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HealthRequest other) {
      if (other == null) {
        return;
      }
      if (other.Uptime.Length != 0) {
        Uptime = other.Uptime;
      }
      if (other.Machine.Length != 0) {
        Machine = other.Machine;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Uptime = input.ReadString();
            break;
          }
          case 18: {
            Machine = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HealthResponse : pb::IMessage<HealthResponse> {
    private static readonly pb::MessageParser<HealthResponse> _parser = new pb::MessageParser<HealthResponse>(() => new HealthResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HealthResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Vinyl.VinylReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HealthResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HealthResponse(HealthResponse other) : this() {
      uptime_ = other.uptime_;
      machine_ = other.machine_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HealthResponse Clone() {
      return new HealthResponse(this);
    }

    /// <summary>Field number for the "uptime" field.</summary>
    public const int UptimeFieldNumber = 1;
    private string uptime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uptime {
      get { return uptime_; }
      set {
        uptime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "machine" field.</summary>
    public const int MachineFieldNumber = 2;
    private string machine_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Machine {
      get { return machine_; }
      set {
        machine_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HealthResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HealthResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uptime != other.Uptime) return false;
      if (Machine != other.Machine) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uptime.Length != 0) hash ^= Uptime.GetHashCode();
      if (Machine.Length != 0) hash ^= Machine.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uptime.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uptime);
      }
      if (Machine.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Machine);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uptime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uptime);
      }
      if (Machine.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Machine);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HealthResponse other) {
      if (other == null) {
        return;
      }
      if (other.Uptime.Length != 0) {
        Uptime = other.Uptime;
      }
      if (other.Machine.Length != 0) {
        Machine = other.Machine;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Uptime = input.ReadString();
            break;
          }
          case 18: {
            Machine = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BadRequest : pb::IMessage<BadRequest> {
    private static readonly pb::MessageParser<BadRequest> _parser = new pb::MessageParser<BadRequest>(() => new BadRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BadRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Vinyl.VinylReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BadRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BadRequest(BadRequest other) : this() {
      code_ = other.code_;
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BadRequest Clone() {
      return new BadRequest(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private long code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BadRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BadRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0L) hash ^= Code.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Code);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Code);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BadRequest other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0L) {
        Code = other.Code;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = input.ReadInt64();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
